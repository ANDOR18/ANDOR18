Microsoft (R) Macro Assembler Version 14.24.28316.0	    04/28/20 13:04:04
: Network Simulato					     Page 1 - 1


				title: Network Simulator
				; Group 2 members: Nathaniel DeHart, Kevin Andor, Matt Oblock

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Immediates
 = 0000000A			QUEUESIZE equ 10
 = 00000006			PACKETSIZE equ 6
 = 0000000C			CONNECTSIZE equ 12
 = 00000000			NODECONNECT equ 0
 = 00000004			TRANSOFFSET equ 4
 = 00000008			RECEIVEOFFSET equ 8
 = 00000000			NAMEOFFSET equ 0
 = 00000001			CONNECTOFFSET equ 1
 = 00000002			QUEUEOFFSET equ 2
 = 00000006			INPUTOFFSET equ 6
 = 0000000A			OUTPUTOFFSET equ 10
 = 0000000E			NODESTRUCTSIZE equ 14
 = 0000003C			FULLQUEUE equ QUEUESIZE * PACKETSIZE
 = 00000000			DESTINATION equ 0
 = 00000001			SENDER equ 1
 = 00000002			ORIGIN equ 2
 = 00000003			TIMEOUT equ 3
 = 00000004			RECEIVED equ 4
 = 00000064			FILEBUFFSIZE equ 100
 = 0000000A			NUMBUFFSIZE equ 10
				; Node Data
 00000000  0000003C [		QueueA byte QUEUESIZE * PACKETSIZE dup(0)
	    00
	   ]
 0000003C			ATransB label byte
 0000003C  00000006 [		BRcvA byte PACKETSIZE dup(0)
	    00
	   ]
 00000042			ATransF label byte
 00000042  00000006 [		FRcvA byte PACKETSIZE dup(0)
	    00
	   ]
 00000048  0000003C [		QueueB byte QUEUESIZE * PACKETSIZE dup(0)
	    00
	   ]
 00000084			BTransA label byte
 00000084  00000006 [		ARcvB byte PACKETSIZE dup(0)
	    00
	   ]
 0000008A			BTransC label byte
 0000008A  00000006 [		CRcvB byte PACKETSIZE dup(0)
	    00
	   ]
 00000090			BTransE label byte
 00000090  00000006 [		ERcvB byte PACKETSIZE dup(0)
	    00
	   ]
 00000096  0000003C [		QueueC byte QUEUESIZE * PACKETSIZE dup(0)
	    00
	   ]
 000000D2			CTransB label byte
 000000D2  00000006 [		BRcvC byte PACKETSIZE dup(0)
	    00
	   ]
 000000D8			CTransD label byte
 000000D8  00000006 [		DRcvC byte PACKETSIZE dup(0)
	    00
	   ]
 000000DE			CTransF label byte
 000000DE  00000006 [		FRcvC byte PACKETSIZE dup(0)
	    00
	   ]
 000000E4  0000003C [		QueueD byte QUEUESIZE * PACKETSIZE dup(0)
	    00
	   ]
 00000120			DTransC label byte
 00000120  00000006 [		CRcvD byte PACKETSIZE dup(0)
	    00
	   ]
 00000126			DTransE label byte
 00000126  00000006 [		ERcvD byte PACKETSIZE dup(0)
	    00
	   ]
 0000012C  0000003C [		QueueE byte QUEUESIZE * PACKETSIZE dup(0)
	    00
	   ]
 00000168			ETransD label byte
 00000168  00000006 [		DRcvE byte PACKETSIZE dup(0)
	    00
	   ]
 0000016E			ETransB label byte
 0000016E  00000006 [		BRcvE byte PACKETSIZE dup(0)
	    00
	   ]
 00000174			ETransF label byte
 00000174  00000006 [		FRcvE byte PACKETSIZE dup(0)
	    00
	   ]
 0000017A  0000003C [		QueueF byte QUEUESIZE * PACKETSIZE dup(0)
	    00
	   ]
 000001B6			FTransE label byte
 000001B6  00000006 [		ERcvF byte PACKETSIZE dup(0)
	    00
	   ]
 000001BC			FTransA label byte
 000001BC  00000006 [		ARcvF byte PACKETSIZE dup(0)
	    00
	   ]
 000001C2			FTransC label byte
 000001C2  00000006 [		CRcvF byte PACKETSIZE dup(0)
	    00
	   ]
				; Node A Structure
 000001C8 41			NodeA byte 'A'
 000001C9 02			AC byte 2
 000001CA 00000000 R		PQueueA dword QueueA
 000001CE 00000000 R		QueueAIn dword QueueA
 000001D2 00000000 R		QueueAOut dword QueueA
				; End of fixed portion
 000001D6 000001EE R		APointB dword NodeB
 000001DA 0000003C R		PATransB dword ATransB
 000001DE 00000084 R		PARcvB dword ARcvB
 000001E2 000002AA R		APointF dword NodeF
 000001E6 00000042 R		PATransF dword ATransF
 000001EA 000001BC R		PARcvF dword ARcvF
				; End of variable portion
				; Node B Structure
 000001EE 42			NodeB byte 'B'
 000001EF 03			BC byte 3
 000001F0 00000048 R		PQueueB dword QueueB
 000001F4 00000048 R		QueueBIn dword QueueB
 000001F8 00000048 R		QueueBOut dword QueueB
				; End of fixed portion
 000001FC 000001C8 R		BPointA dword NodeA
 00000200 00000084 R		PBTransA dword BTransA
 00000204 0000003C R		PBRcvA dword BRcvA
 00000208 00000220 R		BPointC dword NodeC
 0000020C 0000008A R		PBTransC dword BTransC
 00000210 000000D2 R		PBRcvC dword BRcvC
 00000214 00000278 R		BPointE dword NodeE
 00000218 00000090 R		PBTransE dword BTransE
 0000021C 0000016E R		PBRcvE dword BRcvE
				; End of variable portion
				; Node C Structure
 00000220 43			NodeC byte 'C'
 00000221 03			CC byte 3
 00000222 00000096 R		PQueueC dword QueueC
 00000226 00000096 R		QueueCIn dword QueueC
 0000022A 00000096 R		QueueCOut dword QueueC
				; End of fixed portion
 0000022E 000001EE R		CPointB dword NodeB
 00000232 000000D2 R		PCTransB dword CTransB
 00000236 0000008A R		PCRcvB dword CRcvB
 0000023A 00000252 R		CPointD dword NodeD
 0000023E 000000D8 R		PCTransD dword CTransD
 00000242 00000120 R		PCRcvD dword CRcvD
 00000246 000002AA R		CPointF dword NodeF
 0000024A 000000DE R		PCTransF dword CTransF
 0000024E 000001C2 R		PCRcvF dword CRcvF
				; End of variable portion
				; Node D Structure
 00000252 44			NodeD byte 'D'
 00000253 02			DC byte 2
 00000254 000000E4 R		PQueueD dword QueueD
 00000258 000000E4 R		QueueDIn dword QueueD
 0000025C 000000E4 R		QueueDOut dword QueueD
				; End of fixed portion
 00000260 00000220 R		DPointC dword NodeC
 00000264 00000120 R		PDTransC dword DTransC
 00000268 000000D8 R		PDRcvC dword DRcvC
 0000026C 00000278 R		DPointE dword NodeE
 00000270 00000126 R		PDTransE dword DTransE
 00000274 00000168 R		PDRcvE dword DRcvE
				; End of variable portion
				; Node E Structure
 00000278 45			NodeE byte 'E'
 00000279 03			EC byte 3
 0000027A 0000012C R		PQueueE dword QueueE
 0000027E 0000012C R		QueueEIn dword QueueE
 00000282 0000012C R		QueueEOut dword QueueE
				; End of fixed portion
 00000286 00000252 R		EPointD dword NodeD
 0000028A 00000168 R		PETransD dword ETransD
 0000028E 00000126 R		PERcvD dword ERcvD
 00000292 000002AA R		EPointF dword NodeF
 00000296 00000174 R		PETransF dword ETransF
 0000029A 000001B6 R		PERcvF dword ERcvF
 0000029E 000001EE R		EPointB dword NodeB
 000002A2 0000016E R		PETransB dword ETransB
 000002A6 00000090 R		PERcvB dword ERcvB
				; End of variable portion
				; Node F Structure
 000002AA 46			NodeF byte 'F'
 000002AB 03			FC byte 3
 000002AC 0000017A R		PQueueF dword QueueF
 000002B0 0000017A R		QueueFIn dword QueueF
 000002B4 0000017A R		QueueFOut dword QueueF
				; End of fixed portion
 000002B8 000001C8 R		FPointA dword NodeA
 000002BC 000001BC R		PFTransA dword FTransA
 000002C0 00000042 R		PFRcvA dword FRcvA
 000002C4 00000278 R		FPointE dword NodeE
 000002C8 000001B6 R		PFTransE dword FTransE
 000002CC 00000174 R		PFRcvE dword FRcvE
 000002D0 00000220 R		FPointC dword NodeC
 000002D4 000001C2 R		PFTransC dword FTransC
 000002D8 000000DE R		PFRcvC dword FRcvC
				; End of variable portion
 000002DC 000002DC R		EndOfNodes dword EndOfNodes
				; Other data
 000002E0  00000004 [		InitPacket byte PACKETSIZE - 2 dup(0) ; (Destination, Sender, Origin, Timeout counter,...
	    00
	   ]
 000002E4 0000			InitRecTime word 0 ; ...Receive time)
 000002E6 4E 6F 64 65 3A	NodeTag byte "Node: ", 0
	   20 00
 000002ED 43 6F 6E 6E 65	ConnectTag byte "Connection: ", 0
	   63 74 69 6F 6E
	   3A 20 00
 000002FA 09 53 6F 75 72	SourceMsg byte "	Source Node: ", 0
	   63 65 20 4E 6F
	   64 65 3A 20 00
 00000309 49 6E 69 74 69	PacketInfoMsg byte "Initial Message Settings", 0
	   61 6C 20 4D 65
	   73 73 61 67 65
	   20 53 65 74 74
	   69 6E 67 73 00
 00000322 09 54 54 4C 3A	TTLMsg byte "	TTL:", 0
	   00
 00000328 09 45 63 68 6F	EchoMsg byte "	Echo", 0
	   00
 0000032E 09 4E 6F 45 63	NoEchoMsg byte "	NoEcho", 0
	   68 6F 00
 00000336 09 44 65 73 74	DestMsg byte "	Destination Node: ", 0
	   69 6E 61 74 69
	   6F 6E 20 4E 6F
	   64 65 3A 20 00
 0000034A 09 50 72 6F 63	ProcMsg byte "	Processing  ", 0
	   65 73 73 69 6E
	   67 20 20 00
 00000358 54 68 65 72 65	ErrorWriteMsg byte "There was an error writing to the file!", 0
	   20 77 61 73 20
	   61 6E 20 65 72
	   72 6F 72 20 77
	   72 69 74 69 6E
	   67 20 74 6F 20
	   74 68 65 20 66
	   69 6C 65 21 00
 00000380 4E 6F 64 65 4F	FileName byte "NodeOutputData.txt", 0
	   75 74 70 75 74
	   44 61 74 61 2E
	   74 78 74 00
 00000393 54 69 6D 65 20	TimeMsg byte "Time is:", 0
	   69 73 3A 00
 0000039C 09 09 41 74 20	AtTimeMsg byte "		At time ", 0
	   74 69 6D 65 20
	   00
 000003A7 20 61 20 6D 65	ReceiveMsg byte " a message was received from  ", 0
	   73 73 61 67 65
	   20 77 61 73 20
	   72 65 63 65 69
	   76 65 64 20 66
	   72 6F 6D 20 20
	   00
 000003C6 09 09 09 41 20	GeneratedMsg byte "			A message was generated for  ", 0
	   6D 65 73 73 61
	   67 65 20 77 61
	   73 20 67 65 6E
	   65 72 61 74 65
	   64 20 66 6F 72
	   20 20 00
 000003E7 09 09 09 09 54	MsgSentMsg byte "				The message was sent", 0
	   68 65 20 6D 65
	   73 73 61 67 65
	   20 77 61 73 20
	   73 65 6E 74 00
 00000400 09 09 09 09 54	MsgNotSentMsg byte "				The message was not sent", 0
	   68 65 20 6D 65
	   73 73 61 67 65
	   20 77 61 73 20
	   6E 6F 74 20 73
	   65 6E 74 00
 0000041D 54 68 65 72 65	ThereMsg byte "There are ", 0
	   20 61 72 65 20
	   00
 00000428 20 6D 65 73 73	MsgsActiveMsg byte " messages active, ", 0
	   61 67 65 73 20
	   61 63 74 69 76
	   65 2C 20 00
 0000043B 20 6D 65 73 73	MsgsHaveMsg byte " messages have been generated at this time, and a total of ", 0
	   61 67 65 73 20
	   68 61 76 65 20
	   62 65 65 6E 20
	   67 65 6E 65 72
	   61 74 65 64 20
	   61 74 20 74 68
	   69 73 20 74 69
	   6D 65 2C 20 61
	   6E 64 20 61 20
	   74 6F 74 61 6C
	   20 6F 66 20 00
 00000477 20 6D 65 73 73	MsgsExistMsg byte " messages existed in the network", 0
	   61 67 65 73 20
	   65 78 69 73 74
	   65 64 20 69 6E
	   20 74 68 65 20
	   6E 65 74 77 6F
	   72 6B 00
 00000498 27 73 20 72 65	ProcRcvMsg byte "'s receivers", 0
	   63 65 69 76 65
	   72 73 00
 000004A5 09 09 41 20 6D	MsgRcvdMsg byte "		A message was received from  ", 0
	   65 73 73 61 67
	   65 20 77 61 73
	   20 72 65 63 65
	   69 76 65 64 20
	   66 72 6F 6D 20
	   20 00
 000004C5 09 09 09 54 68	MsgReachedMsg byte "			The message has reached its destination from  ", 0
	   65 20 6D 65 73
	   73 61 67 65 20
	   68 61 73 20 72
	   65 61 63 68 65
	   64 20 69 74 73
	   20 64 65 73 74
	   69 6E 61 74 69
	   6F 6E 20 66 72
	   6F 6D 20 20 00
 000004F7 54 68 65 20 70	TotTimeMsg1 byte "The process took a total of ", 0
	   72 6F 63 65 73
	   73 20 74 6F 6F
	   6B 20 61 20 74
	   6F 74 61 6C 20
	   6F 66 20 00
 00000514 20 63 79 63 6C	TotTimeMsg2 byte " cycles", 0
	   65 73 00
 0000051C 54 68 65 72 65	TotMsgsGenMsg1 byte "There was a total of ", 0
	   20 77 61 73 20
	   61 20 74 6F 74
	   61 6C 20 6F 66
	   20 00
 00000532 20 6D 65 73 73	TotMsgsGenMsg2 byte " messages generated", 0
	   61 67 65 73 20
	   67 65 6E 65 72
	   61 74 65 64 00
 00000546 41 62 6F 75 74	AboutMsg byte "About ", 0
	   20 00
 0000054D 20 70 65 72 63	PercentRcvdMsg byte " percent of the messages were received", 0
	   65 6E 74 20 6F
	   66 20 74 68 65
	   20 6D 65 73 73
	   61 67 65 73 20
	   77 65 72 65 20
	   72 65 63 65 69
	   76 65 64 00
 00000574 54 68 65 72 65	ActiveMsgsMsg1 byte "There are ", 0
	   20 61 72 65 20
	   00
 0000057F 20 61 63 74 69	ActiveMsgsMsg2 byte " active messages", 0
	   76 65 20 6D 65
	   73 73 61 67 65
	   73 00
 00000590 54 68 65 72 65	AverageHopMsg1 byte "There was an average of ", 0
	   20 77 61 73 20
	   61 6E 20 61 76
	   65 72 61 67 65
	   20 6F 66 20 00
 000005A9 20 68 6F 70 73	AverageHopMsg2 byte " hops done to reach the destination", 0
	   20 64 6F 6E 65
	   20 74 6F 20 72
	   65 61 63 68 20
	   74 68 65 20 64
	   65 73 74 69 6E
	   61 74 69 6F 6E
	   00
 000005CD 49 74 20 74 6F	AverageTimeMsg1 byte "It took an average of ", 0
	   6F 6B 20 61 6E
	   20 61 76 65 72
	   61 67 65 20 6F
	   66 20 00
 000005E4 20 63 79 63 6C	AverageTimeMsg2 byte " cycles for each packet to reach the destination", 0
	   65 73 20 66 6F
	   72 20 65 61 63
	   68 20 70 61 63
	   6B 65 74 20 74
	   6F 20 72 65 61
	   63 68 20 74 68
	   65 20 64 65 73
	   74 69 6E 61 74
	   69 6F 6E 00
 00000615 54 68 65 72 65	CreateOutErrorMsg byte "There was an error creating an output file", 0
	   20 77 61 73 20
	   61 6E 20 65 72
	   72 6F 72 20 63
	   72 65 61 74 69
	   6E 67 20 61 6E
	   20 6F 75 74 70
	   75 74 20 66 69
	   6C 65 00
 00000640 09 09 09 54 68	MsgDiedMsg byte "			The message died", 0
	   65 20 6D 65 73
	   73 61 67 65 20
	   64 69 65 64 00
 00000654 09 09 09 51 75	QueueFullMsg byte "			Queue is full", 13, 10, 0
	   65 75 65 20 69
	   73 20 66 75 6C
	   6C 0D 0A 00
 00000667 09 09 51 75 65	QueueEmptyMsg byte "		Queue is empty", 13, 10, 0
	   75 65 20 69 73
	   20 65 6D 70 74
	   79 0D 0A 00
 0000067A 09 45 61 63 68	QueueSizeMsg1 byte "	Each node's message queue can hold ", 0
	   20 6E 6F 64 65
	   27 73 20 6D 65
	   73 73 61 67 65
	   20 71 75 65 75
	   65 20 63 61 6E
	   20 68 6F 6C 64
	   20 00
 0000069F 20 70 61 63 6B	QueueSizeMsg2 byte " packets", 0
	   65 74 73 00
 000006A8  0000000A [		NumberBuffer byte NUMBUFFSIZE dup(0)
	    00
	   ]
 000006B2 00000000		BytesRead dword 0
 000006B6 00000000		InFileHandle dword 0
 000006BA 00000000		OutFileHandle dword 0
 000006BE 0D 0A 00		NewLine byte 13, 10, 0
 000006C1 000001C8 R		NodePointer dword NodeA
 000006C5 00			NodeName byte 0 
 000006C6 00			NodeFrom byte 0
 000006C7 00000000		MessagePointer dword 0
 000006CB  00000006 [		TempPacket byte PACKETSIZE dup(0)
	    00
	   ]
 000006D1 0000			Time word 0
 000006D3 0000			NewPacks word 0
 000006D5 0000			GenPacks word 0
 000006D7 0000			TotPacks word 0
 000006D9 0000			ActPacks word 0
 000006DB 0000			RecPacks word 0
 000006DD 0000			TotalTime word 0
 000006DF 00000000		OutputNum dword 0
 000006E3 0000			TotalHops word 0
 000006E5 00000000		AvgHops dword 0
 000006E9 00000000		AvgTime dword 0
 000006ED 00			MaxHops byte 0
 000006EE 00000000		Temp1 dword 0
 000006F2 00000000		Temp2 dword 0
 000006F6 00000000		Temp3 dword 0
 000006FA 00000000		Temp4 dword 0
 000006FE 00000000		Temp5 dword 0
 00000702 00000000		Power dword 0
 00000706 00000000		Digits dword 0
 0000070A 00000000		Result dword 0
 0000070E 42C80000		Float100 Real4 100.0
 00000712 00			EchoBool byte 0

				; More Immediates
 = 00000005			NTAGOFFSET equ sizeof NodeTag - 2
 = 0000000B			CTAGOFFSET equ sizeof ConnectTag - 2

 00000000			.code
 00000000			main proc
				; Gives the inital packet values
				; Also Outputs the initial packet information and the mode of echo
 00000000			Initialize:
 00000000  C6 05 00000712 R		mov EchoBool, 0 ; 0-No Echo, 1-Echo
	   00
 00000007  BF 000002E0 R		mov edi, offset InitPacket
 0000000C  B0 44			mov al, 'D'
 0000000E  88 07			mov DESTINATION[edi], al
 00000010  B0 06			mov al, 6
 00000012  88 47 03			mov TIMEOUT[edi], al
 00000015  B0 41			mov al, 'A'
 00000017  88 47 01			mov SENDER[edi], al
 0000001A  88 47 02			mov ORIGIN[edi], al

 0000001D  8A 47 03			mov al, TIMEOUT[edi]
 00000020  A2 000006ED R		mov MaxHops, al
 00000025  66| C7 05			mov Time, 0
	   000006D1 R
	   0000
 0000002E  66| C7 05			mov TotPacks, 1
	   000006D7 R
	   0001
 00000037  66| C7 05			mov ActPacks, 1
	   000006D9 R
	   0001
 00000040  66| C7 05			mov RecPacks, 0
	   000006DB R
	   0000
 00000049  66| C7 05			mov TotalHops, 0
	   000006E3 R
	   0000
 00000052  66| C7 05			mov TotalTime, 0
	   000006DD R
	   0000
 0000005B  C7 05 000006C1 R		mov NodePointer, offset NodeA
	   000001C8 R
 00000065  C7 05 000006C7 R		mov MessagePointer, offset InitPacket
	   000002E0 R
 0000006F  E8 0000090B			call OpenOutFile
 00000074  BA 00000309 R		mov edx, offset PacketInfoMsg
 00000079  B9 00000019			mov ecx, sizeof PacketInfoMsg
 0000007E  E8 00000685			call OutputMsg
 00000083  E8 00000699			call OutputNewLine
 00000088  BA 0000067A R		mov edx, offset QueueSizeMsg1
 0000008D  B9 00000025			mov ecx, sizeof QueueSizeMsg1
 00000092  C7 05 000006DF R		mov OutputNum, QUEUESIZE
	   0000000A
 0000009C  E8 000006A4			call OutputMsgAndNum
 000000A1  BA 0000069F R		mov edx, offset QueueSizeMsg2
 000000A6  B9 00000009			mov ecx, sizeof QueueSizeMsg2
 000000AB  E8 00000658			call OutputMsg
 000000B0  E8 0000066C			call OutputNewLine
 000000B5  E8 000007C0			call PrintSourceNode
 000000BA  E8 00000814			call PrintDestNode
 000000BF  E8 000007E7			call PrintTimeToLive
 000000C4  E8 00000838			call PrintEchoMode
 000000C9  E8 00000215			call PrintConnections
 000000CE  E8 0000064E			call OutputNewLine
 000000D3			MainLoop:
 000000D3  E8 00000439			call Transmit
					
 000000D8  E8 00000644			call OutputNewLine
 000000DD  BA 0000041D R		mov edx, offset ThereMsg
 000000E2  B9 0000000B			mov ecx, sizeof ThereMsg
 000000E7  B8 00000000			mov eax, 0
 000000EC  66| A1			mov ax, ActPacks
	   000006D9 R
 000000F2  A3 000006DF R		mov OutputNum, eax
 000000F7  E8 00000649			call OutputMsgAndNum
 000000FC  BA 00000428 R		mov edx, offset MsgsActiveMsg
 00000101  B9 00000013			mov ecx, sizeof MsgsActiveMsg
 00000106  B8 00000000			mov eax, 0
 0000010B  66| A1			mov ax, GenPacks
	   000006D5 R
 00000111  A3 000006DF R		mov OutputNum, eax
 00000116  E8 0000062A			call OutputMsgAndNum
 0000011B  BA 0000043B R		mov edx, offset MsgsHaveMsg
 00000120  B9 0000003C			mov ecx, sizeof MsgsHaveMsg
 00000125  B8 00000000			mov eax, 0
 0000012A  66| A1			mov ax, TotPacks
	   000006D7 R
 00000130  A3 000006DF R		mov OutputNum, eax
 00000135  E8 0000060B			call OutputMsgAndNum
 0000013A  BA 00000477 R		mov edx, offset MsgsExistMsg
 0000013F  B9 00000021			mov ecx, sizeof MsgsExistMsg
 00000144  E8 000005BF			call OutputMsg
 00000149  E8 000005D3			call OutputNewLine
 0000014E  E8 000005CE			call OutputNewLine

 00000153  66| 83 05			add Time, 1
	   000006D1 R 01
 0000015B  E8 0000021C			call Receive

 00000160  E8 000005BC			call OutputNewLine
 00000165  BA 00000574 R		mov edx, offset ActiveMsgsMsg1
 0000016A  B9 0000000B			mov ecx, sizeof ActiveMsgsMsg1
 0000016F  B8 00000000			mov eax, 0
 00000174  66| A1			mov ax, ActPacks
	   000006D9 R
 0000017A  A3 000006DF R		mov OutputNum, eax
 0000017F  E8 000005C1			call OutputMsgAndNum
 00000184  BA 0000057F R		mov edx, offset ActiveMsgsMsg2
 00000189  B9 00000011			mov ecx, sizeof ActiveMsgsMsg2
 0000018E  E8 00000575			call OutputMsg
 00000193  E8 00000589			call OutputNewLine
 00000198  E8 00000584			call OutputNewLine

 0000019D  66| A1			mov ax, ActPacks
	   000006D9 R
 000001A3  66| 83 F8 00			cmp ax, 0
 000001A7  0F 8F FFFFFF26		jg MainLoop
 000001AD  EB 00			jmp FinishUp

				; Prints out the total time, the average time taken to reach the destination node, the percentage of the messages received,...
				; ...and the average hops used to reach the destination node
 000001AF			FinishUp:
 000001AF  BA 000004F7 R		mov edx, offset TotTimeMsg1
 000001B4  B9 0000001D			mov ecx, sizeof TotTimeMsg1
 000001B9  B8 00000000			mov eax, 0
 000001BE  66| A1			mov ax, Time
	   000006D1 R
 000001C4  A3 000006DF R		mov OutputNum, eax
 000001C9  E8 00000577			call OutputMsgAndNum
 000001CE  BA 00000514 R		mov edx, offset TotTimeMsg2
 000001D3  B9 00000008			mov ecx, sizeof TotTimeMsg2
 000001D8  E8 0000052B			call OutputMsg
 000001DD  E8 0000053F			call OutputNewLine

 000001E2  BA 0000051C R		mov edx, offset TotMsgsGenMsg1
 000001E7  B9 00000016			mov ecx, sizeof TotMsgsGenMsg1
 000001EC  B8 00000000			mov eax, 0
 000001F1  66| A1			mov ax, TotPacks
	   000006D7 R
 000001F7  A3 000006DF R		mov OutputNum, eax
 000001FC  E8 00000544			call OutputMsgAndNum
 00000201  BA 00000532 R		mov edx, offset TotMsgsGenMsg2
 00000206  B9 00000014			mov ecx, sizeof TotMsgsGenMsg2
 0000020B  E8 000004F8			call OutputMsg
 00000210  E8 0000050C			call OutputNewLine

 00000215  BA 00000546 R		mov edx, offset AboutMsg
 0000021A  B9 00000007			mov ecx, sizeof AboutMsg
 0000021F  DF 05 000006D7 R		fild TotPacks
 00000225  DF 05 000006DB R		fild RecPacks
 0000022B  D8 F1			fdiv st(0), st(1)
 0000022D  D8 0D 0000070E R		fmul Float100
 00000233  DB 0D 0000070A R		fisttp Result
 00000239  A1 0000070A R		mov eax, Result
 0000023E  A3 000006DF R		mov OutputNum, eax
 00000243  E8 000004FD			call OutputMsgAndNum
 00000248  BA 0000054D R		mov edx, offset PercentRcvdMsg
 0000024D  B9 00000027			mov ecx, sizeof PercentRcvdMsg
 00000252  E8 000004B1			call OutputMsg
 00000257  E8 000004C5			call OutputNewLine

 0000025C  BA 00000590 R		mov edx, offset AverageHopMsg1
 00000261  B9 00000019			mov ecx, sizeof AverageHopMsg1
 00000266  DF 05 000006DB R		fild RecPacks
 0000026C  DF 05 000006E3 R		fild TotalHops
 00000272  D8 F1			fdiv st(0), st(1)
 00000274  DB 0D 000006E5 R		fisttp AvgHops
 0000027A  A1 000006E5 R		mov eax, AvgHops
 0000027F  A3 000006DF R		mov OutputNum, eax
 00000284  E8 000004BC			call OutputMsgAndNum
 00000289  BA 000005A9 R		mov edx, offset AverageHopMsg2
 0000028E  B9 00000024			mov ecx, sizeof AverageHopMsg2
 00000293  E8 00000470			call OutputMsg
 00000298  E8 00000484			call OutputNewLine

 0000029D  BA 000005CD R		mov edx, offset AverageTimeMsg1
 000002A2  B9 00000017			mov ecx, sizeof AverageTimeMsg1
 000002A7  DF 05 000006DB R		fild RecPacks
 000002AD  DF 05 000006DD R		fild TotalTime
 000002B3  D8 F1			fdiv st(0), st(1)
 000002B5  DB 0D 000006E9 R		fisttp AvgTime
 000002BB  A1 000006E9 R		mov eax, AvgTime
 000002C0  A3 000006DF R		mov OutputNum, eax
 000002C5  E8 0000047B			call OutputMsgAndNum
 000002CA  BA 000005E4 R		mov edx, offset AverageTimeMsg2
 000002CF  B9 00000031			mov ecx, sizeof AverageTimeMsg2
 000002D4  E8 0000042F			call OutputMsg
 000002D9  E8 00000443			call OutputNewLine

 000002DE  E9 000007C2			jmp Quit

				; Prints out each node along with it's connections
 000002E3			PrintConnections:
 000002E3  C7 05 000006C1 R		mov NodePointer, offset NodeA
	   000001C8 R
 000002ED  8B 35 000006C1 R		mov esi, NodePointer
 000002F3				PrintConnectLoop:
 000002F3  E8 00000429				call OutputNewLine
 000002F8  8A 06				mov al, NAMEOFFSET[esi]
 000002FA  BA 000002E6 R			mov edx, offset NodeTag
 000002FF  B9 00000007				mov ecx, sizeof NodeTag
 00000304  03 D1				add edx, ecx
 00000306  83 EA 02				sub edx, 2
 00000309  88 02				mov [edx], al
 0000030B  BA 000002E6 R			mov edx, offset NodeTag
 00000310  E8 000003F3				call OutputMsg
 00000315  E8 00000407				call OutputNewLine
 0000031A  8A 5E 01				mov bl, CONNECTOFFSET[esi]
 0000031D  83 C6 0E				add esi, NODESTRUCTSIZE
 00000320					NextConnect:
 00000320  8B 3E					mov edi, NODECONNECT[esi]
 00000322  8A 07					mov al, NAMEOFFSET[edi]
 00000324  BA 000002ED R				mov edx, offset ConnectTag
 00000329  B9 0000000D					mov ecx, sizeof ConnectTag
 0000032E  03 D1					add edx, ecx
 00000330  83 EA 02					sub edx, 2
 00000333  88 02					mov [edx], al
 00000335  BA 000002ED R				mov edx, offset ConnectTag
 0000033A  E8 000003C9					call OutputMsg
 0000033F  E8 000003DD					call OutputNewLine
 00000344  FE CB					dec bl
 00000346  83 C6 0C					add esi, CONNECTSIZE
 00000349  80 FB 00					cmp bl, 0
 0000034C  7F D2					jg NextConnect
 0000034E						NextNode:
 0000034E  8B 35 000006C1 R					mov esi, NodePointer
 00000354  8A 5E 01						mov bl, CONNECTOFFSET[esi]
 00000357  B8 0000000C						mov eax, CONNECTSIZE
 0000035C  F6 E3						mul bl
 0000035E  83 C6 0E						add esi, NODESTRUCTSIZE
 00000361  03 F0						add esi, eax
 00000363  89 35 000006C1 R					mov NodePointer, esi
 00000369  3B 35 000002DC R					cmp esi, EndOfNodes
 0000036F  7C 82						jl PrintConnectLoop
 00000371  C7 05 000006C1 R					mov NodePointer, offset NodeA
	   000001C8 R
 0000037B  C3							ret

				; Reads from each node's receivers, and puts any packets found into the respective node's queue
 0000037C			Receive:
 0000037C  BA 00000393 R		mov edx, offset TimeMsg
 00000381  B9 00000009			mov ecx, sizeof TimeMsg
 00000386  B8 00000000			mov eax, 0
 0000038B  66| A1			mov ax, Time
	   000006D1 R
 00000391  A3 000006DF R		mov OutputNum, eax
 00000396  E8 000003AA			call OutputMsgAndNum
 0000039B  C7 05 000006C1 R		mov NodePointer, offset NodeA
	   000001C8 R
 000003A5  8B 35 000006C1 R		mov esi, NodePointer
 000003AB				ReceiveLoop:
 000003AB  E8 00000371				call OutputNewLine
 000003B0  BA 0000034A R			mov edx, offset ProcMsg
 000003B5  B9 0000000E				mov ecx, sizeof ProcMsg
 000003BA  03 D1				add edx, ecx
 000003BC  83 EA 02				sub edx, 2
 000003BF  8A 06				mov al, NAMEOFFSET[esi]
 000003C1  88 02				mov [edx], al
 000003C3  BA 0000034A R			mov edx, offset ProcMsg
 000003C8  E8 0000033B				call OutputMsg
 000003CD  BA 00000498 R			mov edx, offset ProcRcvMsg
 000003D2  B9 0000000D				mov ecx, sizeof ProcRcvMsg
 000003D7  E8 0000032C				call OutputMsg
 000003DC  E8 00000340				call OutputNewLine

 000003E1  8A 5E 01				mov bl, CONNECTOFFSET[esi]
 000003E4  66| C7 05				mov NewPacks, 0
	   000006D3 R
	   0000
 000003ED  83 C6 0E				add esi, NODESTRUCTSIZE
 000003F0					RcvConnectLoop:
 000003F0  8B 7E 08					mov edi, RECEIVEOFFSET[esi]
 000003F3  8A 07					mov al, DESTINATION[edi]
 000003F5  3C 00					cmp al, 0
 000003F7  0F 84 00000081				je RcvNextConnect
 000003FD  BA 000004A5 R				mov edx, offset MsgRcvdMsg
 00000402  B9 00000020					mov ecx, sizeof MsgRcvdMsg
 00000407  03 D1					add edx, ecx
 00000409  83 EA 02					sub edx, 2
 0000040C  8A 47 01					mov al, SENDER[edi]
 0000040F  88 02					mov [edx], al
 00000411  BA 000004A5 R				mov edx, offset MsgRcvdMsg
 00000416  E8 000002ED					call OutputMsg
 0000041B  E8 00000301					call OutputNewLine
 00000420  8A 07					mov al, DESTINATION[edi]
 00000422  8B 15 000006C1 R				mov edx, NodePointer
 00000428  8A 22					mov ah, NAMEOFFSET[edx]
 0000042A  3A C4					cmp al, ah
 0000042C  0F 84 00000081				je DestReached

 00000432  89 3D 000006C7 R				mov MessagePointer, edi
 00000438  8A 47 03					mov al, TIMEOUT[edi]
 0000043B  FE C8					dec al
 0000043D  88 47 03					mov TIMEOUT[edi], al
 00000440  3C 00					cmp al, 0
 00000442  7F 21					jg ContinueReceive
							; Message died
 00000444  66| FF 0D					dec ActPacks
	   000006D9 R
 0000044B  BA 00000640 R				mov edx, offset MsgDiedMsg
 00000450  B9 00000014					mov ecx, sizeof MsgDiedMsg
 00000455  E8 000002AE					call OutputMsg
 0000045A  E8 000002C2					call OutputNewLine
 0000045F  B0 00					mov al, 0
 00000461  88 07					mov DESTINATION[edi], al
 00000463  EB 19					jmp RcvNextConnect

 00000465						ContinueReceive:
 00000465  66| A1						mov ax, Time
	   000006D1 R
 0000046B  66| 89 47 04						mov RECEIVED[edi], ax
 0000046F  E8 0000054B						call PutPacket
 00000474  0F 82 FFFFFD35					jc FinishUp
 0000047A  B0 00						mov al, 0
 0000047C  88 07						mov DESTINATION[edi], al
 0000047E							RcvNextConnect:
 0000047E  83 C6 0C							add esi, CONNECTSIZE
 00000481  4B								dec ebx
 00000482  83 FB 00							cmp ebx, 0
 00000485  0F 8F FFFFFF65						jg RcvConnectLoop
 0000048B								RcvNextNode:
 0000048B  8B 35 000006C1 R							mov esi, NodePointer
 00000491  B8 0000000C								mov eax, CONNECTSIZE
 00000496  8A 5E 01								mov bl, CONNECTOFFSET[esi]
 00000499  F6 E3								mul bl
 0000049B  03 F0								add esi, eax
 0000049D  83 C6 0E								add esi, NODESTRUCTSIZE
 000004A0  89 35 000006C1 R							mov NodePointer, esi
 000004A6  3B 35 000002DC R							cmp esi, EndOfNodes
 000004AC  0F 8C FFFFFEF9							jl ReceiveLoop
										; All the nodes have been processed
 000004B2  C3									ret
 000004B3						DestReached:
 000004B3  66| FF 0D						dec ActPacks
	   000006D9 R
 000004BA  66| FF 05						inc RecPacks
	   000006DB R
 000004C1  B8 00000000						mov eax, 0
 000004C6  88 07						mov DESTINATION[edi], al
 000004C8  A0 000006ED R					mov al, MaxHops
 000004CD  8A 4F 03						mov cl, TIMEOUT[edi]
 000004D0  2A C1						sub al, cl
 000004D2  66| 01 05						add TotalHops, ax
	   000006E3 R
 000004D9  B8 00000000						mov eax, 0
 000004DE  66| 8B 47 04						mov ax, RECEIVED[edi]
 000004E2  66| 01 05						add TotalTime, ax
	   000006DD R
 000004E9  BA 000004C5 R					mov edx, offset MsgReachedMsg
 000004EE  B9 00000032						mov ecx, sizeof MsgReachedMsg
 000004F3  03 D1						add edx, ecx
 000004F5  83 EA 02						sub edx, 2
 000004F8  8A 47 02						mov al, ORIGIN[edi]
 000004FB  88 02						mov [edx], al
 000004FD  BA 000004C5 R					mov edx, offset MsgReachedMsg
 00000502  E8 00000201						call OutputMsg
 00000507  E8 00000215						call OutputNewLine
 0000050C  E9 FFFFFF6D						jmp RcvNextConnect

				; Transmits packets into the transmit/receive buffers to nearby nodes for each node
				; Will not send a message if the receiving node's receiver buffer already contains a packet
				; If Echo mode is turned off then the each node will avoid sending the packet to subsequent nodes 
 00000511			Transmit:
 00000511  BA 00000393 R		mov edx, offset TimeMsg
 00000516  B9 00000009			mov ecx, sizeof TimeMsg
 0000051B  B8 00000000			mov eax, 0
 00000520  66| A1			mov ax, Time
	   000006D1 R
 00000526  A3 000006DF R		mov OutputNum, eax
 0000052B  E8 00000215			call OutputMsgAndNum
 00000530  C7 05 000006C1 R		mov NodePointer, offset NodeA
	   000001C8 R
 0000053A  66| C7 05			mov GenPacks, 0
	   000006D5 R
	   0000
 00000543  8B 35 000006C1 R		mov esi, NodePointer
 00000549				TransmitLoop:
 00000549  E8 000001D3				call OutputNewLine
 0000054E  BA 0000034A R			mov edx, offset ProcMsg
 00000553  B9 0000000E				mov ecx, sizeof ProcMsg
 00000558  03 D1				add edx, ecx
 0000055A  83 EA 02				sub edx, 2
 0000055D  B8 00000000				mov eax, 0
 00000562  8A 06				mov al, NAMEOFFSET[esi]
 00000564  88 02				mov [edx], al
 00000566  A2 000006C5 R			mov NodeName, al
 0000056B  BA 0000034A R			mov edx, offset ProcMsg
 00000570  E8 00000193				call OutputMsg
 00000575  E8 000001A7				call OutputNewLine
 0000057A  C7 05 000006C7 R			mov MessagePointer, offset TempPacket
	   000006CB R
 00000584  E8 00000490				call GetPacket
 00000589  0F 82 00000129			jc TransNextNode

 0000058F  8B 3D 000006C7 R			mov edi, MessagePointer
 00000595  BB 00000000				mov ebx, 0
 0000059A  8A 5E 01				mov bl, CONNECTOFFSET[esi]
 0000059D  BA 0000039C R			mov edx, offset AtTimeMsg
 000005A2  B9 0000000B				mov ecx, sizeof AtTimeMsg
 000005A7  B8 00000000				mov eax, 0
 000005AC  66| 8B 47 04				mov ax, RECEIVED[edi]
 000005B0  A3 000006DF R			mov OutputNum, eax
 000005B5  E8 0000018B				call OutputMsgAndNum

 000005BA  8B 3D 000006C7 R			mov edi, MessagePointer
 000005C0  BA 000003A7 R			mov edx, offset ReceiveMsg
 000005C5  B9 0000001F				mov ecx, sizeof ReceiveMsg
 000005CA  03 D1				add edx, ecx
 000005CC  83 EA 02				sub edx, 2
 000005CF  8A 47 01				mov al, SENDER[edi]
 000005D2  88 02				mov [edx], al
 000005D4  A2 000006C6 R			mov NodeFrom, al
 000005D9  A0 000006C5 R			mov al, NodeName
 000005DE  88 47 01				mov SENDER[edi], al
 000005E1  BA 000003A7 R			mov edx, offset ReceiveMsg
 000005E6  B9 0000001F				mov ecx, sizeof ReceiveMsg
 000005EB  E8 00000118				call OutputMsg
 000005F0  E8 0000012C				call OutputNewLine

 000005F5  66| C7 05				mov NewPacks, -1
	   000006D3 R
	   FFFF
 000005FE  66| FF 0D				dec GenPacks
	   000006D5 R
 00000605  66| FF 0D				dec TotPacks
	   000006D7 R
 0000060C  66| FF 0D				dec ActPacks
	   000006D9 R

 00000613  83 C6 0E				add esi, NODESTRUCTSIZE
 00000616					TransConnectLoop:
 00000616  BA 000003C6 R				mov edx, offset GeneratedMsg
 0000061B  B9 00000021					mov ecx, sizeof GeneratedMsg
 00000620  03 D1					add edx, ecx
 00000622  83 EA 02					sub edx, 2
 00000625  8B 3E					mov edi, NODECONNECT[esi]
 00000627  8A 07					mov al, NAMEOFFSET[edi]
 00000629  88 02					mov [edx], al
 0000062B  BA 000003C6 R				mov edx, offset GeneratedMsg
 00000630  E8 000000D3					call OutputMsg
 00000635  E8 000000E7					call OutputNewLine
 0000063A  8B 46 04					mov eax, TRANSOFFSET[esi]
 0000063D  8A 08					mov cl, DESTINATION[eax]
 0000063F  80 F9 00					cmp cl, 0
 00000642  75 52					jne SkipSendPacket
 00000644  80 3D 00000712 R				cmp EchoBool, 1
	   01
 0000064B  74 0A					je SendPacket
 0000064D  8A 07					mov al, NAMEOFFSET[edi]
 0000064F  38 05 000006C6 R				cmp NodeFrom, al
 00000655  74 3F					je SkipSendPacket
 00000657						SendPacket:
 00000657  66| FF 05						inc ActPacks
	   000006D9 R
 0000065E  66| FF 05						inc NewPacks
	   000006D3 R
 00000665  66| FF 05						inc GenPacks
	   000006D5 R
 0000066C  66| FF 05						inc TotPacks
	   000006D7 R
 00000673  8B 46 04						mov eax, TRANSOFFSET[esi]
 00000676  E8 00000065						call CopyPacket
 0000067B  B9 00000006						mov ecx, PACKETSIZE
 00000680  BA 000003E7 R					mov edx, offset MsgSentMsg
 00000685  B9 00000019						mov ecx, sizeof MsgSentMsg
 0000068A  E8 00000079						call OutputMsg
 0000068F  E8 0000008D						call OutputNewLine
 00000694  EB 14						jmp TransNextConnect
 00000696					SkipSendPacket:
 00000696  BA 00000400 R				mov edx, offset MsgNotSentMsg
 0000069B  B9 0000001D					mov ecx, sizeof MsgNotSentMsg
 000006A0  E8 00000063					call OutputMsg
 000006A5  E8 00000077					call OutputNewLine
 000006AA						TransNextConnect:
 000006AA  83 C6 0C						add esi, CONNECTSIZE
 000006AD  FE CB						dec bl
 000006AF  80 FB 00						cmp bl, 0
 000006B2  0F 8F FFFFFF5E					jg TransConnectLoop
 000006B8							TransNextNode:
 000006B8  8B 35 000006C1 R						mov esi, NodePointer
 000006BE  8A 5E 01							mov bl, CONNECTOFFSET[esi]
 000006C1  B8 0000000C							mov eax, CONNECTSIZE
 000006C6  F6 E3							mul bl
 000006C8  83 C6 0E							add esi, NODESTRUCTSIZE
 000006CB  03 F0							add esi, eax
 000006CD  89 35 000006C1 R						mov NodePointer, esi
 000006D3  3B 35 000002DC R						cmp esi, EndOfNodes
 000006D9  0F 8C FFFFFE6A						jl TransmitLoop
									; All of the nodes have been processed
 000006DF  C3								ret

				; Copies the packet data from TempPacket to a memory address in eax
 000006E0			CopyPacket:
 000006E0  89 35 000006EE R		mov Temp1, esi
 000006E6  89 3D 000006F2 R		mov Temp2, edi
 000006EC  8B 35 000006C7 R		mov esi, MessagePointer
 000006F2  8B F8			mov edi, eax
 000006F4  B9 00000006			mov ecx, PACKETSIZE
 000006F9  F3/ A4			rep movsb
 000006FB  8B 35 000006EE R		mov esi, Temp1
 00000701  8B 3D 000006F2 R		mov edi, Temp2
 00000707  C3				ret

				; Outputs the message in edx to the console and a file
 00000708			OutputMsg:
 00000708  E8 00000000 E		call WriteString
 0000070D  A1 000006BA R		mov eax, OutFileHandle
 00000712  E8 00000000 E		call WriteToFile
 00000717  83 F8 00			cmp eax, 0
 0000071A  0F 84 0000024B		je ErrorWriting
 00000720  C3				ret

				; Outputs the message in edx onto the console and a file
				; Outputs a carriage return and line feed if the carry flag is set
 00000721			OutputNewLine:
 00000721  F8				clc
 00000722  A1 000006BA R		mov eax, OutFileHandle
 00000727  BA 000006BE R		mov edx, offset NewLine
 0000072C  B9 00000002			mov ecx, sizeof NewLine - 1
 00000731  E8 00000000 E		call WriteString
 00000736  E8 00000000 E		call WriteToFile
 0000073B  83 F8 00			cmp eax, 0
 0000073E  0F 84 00000227		je ErrorWriting
 00000744  C3				ret

				; Outputs the message in edx onto the console and a file
				; Then outputs a number stored in ebx onto the console and file
				; Outputs a carriage return and line feed if the carry flag is set
 00000745			OutputMsgAndNum:
 00000745  E8 00000000 E		call WriteString
 0000074A  A1 000006BA R		mov eax, OutFileHandle
 0000074F  E8 00000000 E		call WriteToFile
 00000754  83 F8 00			cmp eax, 0
 00000757  0F 84 0000020E		je ErrorWriting
 0000075D  8B 15 000006DF R		mov edx, OutputNum
 00000763  B8 000006A8 R		mov eax, offset NumberBuffer
 00000768  E8 00000040			call ConvertToString
 0000076D  BA 000006A8 R		mov edx, offset NumberBuffer
 00000772  E8 00000000 E		call WriteString
 00000777  A1 000006BA R		mov eax, OutFileHandle
 0000077C  E8 00000000 E		call WriteToFile
 00000781  83 F8 00			cmp eax, 0
 00000784  0F 84 000001E1		je ErrorWriting
 0000078A  B8 000006A8 R		mov eax, offset NumberBuffer
 0000078F  89 0D 000006EE R		mov Temp1, ecx
 00000795  89 1D 000006F2 R		mov Temp2, ebx
 0000079B  E8 000001F9			call ClearBuffer
 000007A0  8B 0D 000006EE R		mov ecx, Temp1
 000007A6  8B 1D 000006F2 R		mov ebx, Temp2
 000007AC  C3				ret

				; Converts an integer stored in edx into a character string that gets stored in a buffer whose start address is in eax
				; Make sure the buffer has enough space to store the digits!
				; Can't convert negative numbers!	
 000007AD			ConvertToString:
 000007AD  A3 000006EE R		mov Temp1, eax	
 000007B2  89 15 000006F2 R		mov Temp2, edx
 000007B8  89 15 000006F6 R		mov Temp3, edx
 000007BE  89 3D 000006FA R		mov Temp4, edi
 000007C4  89 1D 000006FE R		mov Temp5, ebx
 000007CA  8B F8			mov edi, eax
 000007CC  C7 05 00000702 R		mov Power, 10
	   0000000A
 000007D6  C7 05 00000706 R		mov Digits, 0
	   00000000
 000007E0  B9 00000000			mov ecx, 0
 000007E5				GetNumOfDigits:
						; Check if there is another digit
 000007E5  BA 00000000				mov edx, 0
 000007EA  A1 000006F6 R			mov eax, Temp3
 000007EF  8B 1D 00000702 R			mov ebx, Power
 000007F5  F7 F3				div ebx
 000007F7  29 15 000006F6 R			sub Temp3, edx
 000007FD  83 3D 000006F6 R			cmp Temp3, 0
	   00
 00000804  7E 19				jle ConvertDigit
 00000806  FF 05 00000706 R			inc Digits
 0000080C  A1 00000702 R			mov eax, Power
 00000811  BB 0000000A				mov ebx, 10
 00000816  F7 E3				mul ebx
 00000818  A3 00000702 R			mov Power, eax
 0000081D  EB C6				jmp GetNumOfDigits
 0000081F				ConvertDigit:
 0000081F  41					inc ecx
 00000820  BA 00000000				mov edx, 0
 00000825  A1 00000702 R			mov eax, Power
 0000082A  BB 0000000A				mov ebx, 10
 0000082F  F7 F3				div ebx
 00000831  A3 00000702 R			mov Power, eax
 00000836  BA 00000000				mov edx, 0
 0000083B  A1 000006F2 R			mov eax, Temp2
 00000840  8B 1D 00000702 R			mov ebx, Power
 00000846  F7 F3				div ebx
 00000848  89 15 000006F2 R			mov Temp2, edx
 0000084E  8B 3D 000006EE R			mov edi, Temp1
 00000854  04 30				add al, 30h
 00000856  88 07				mov [edi], al
 00000858  FF 05 000006EE R			inc Temp1
 0000085E  FF 0D 00000706 R			dec Digits
 00000864  83 3D 00000706 R			cmp Digits, 0
	   00
 0000086B  7D B2				jge ConvertDigit
 0000086D  8B 3D 000006FA R			mov edi, Temp4
 00000873  8B 1D 000006FE R			mov ebx, Temp5
 00000879  C3					ret

				; Prints MessagePointer's source node name
 0000087A			PrintSourceNode:
 0000087A  BA 000002FA R		mov edx, offset SourceMsg
 0000087F  B9 0000000F			mov ecx, sizeof SourceMsg
 00000884  03 D1			add edx, ecx
 00000886  83 EA 02			sub edx, 2
 00000889  8B 3D 000006C7 R		mov edi, MessagePointer
 0000088F  8A 47 01			mov al, SENDER[edi]
 00000892  8A D8			mov bl, al
 00000894  88 02			mov [edx], al
 00000896  BA 000002FA R		mov edx, offset SourceMsg
 0000089B  E8 FFFFFE68			call OutputMsg
 000008A0  E8 FFFFFE7C			call OutputNewLine
 000008A5  E8 0000007F			call FindSource
 000008AA  C3				ret

				; Prints MessagePointer's Time To Live
 000008AB			PrintTimeToLive:
 000008AB  BA 00000322 R		mov edx, offset TTLMsg
 000008B0  B9 00000006			mov ecx, sizeof TTLMsg
 000008B5  B8 00000000			mov eax, 0
 000008BA  8B 3D 000006C7 R		mov edi, MessagePointer
 000008C0  8A 47 03			mov al, TIMEOUT[edi]
 000008C3  A3 000006DF R		mov OutputNum, eax
 000008C8  E8 FFFFFE78			call OutputMsgAndNum
 000008CD  E8 FFFFFE4F			call OutputNewLine
 000008D2  C3				ret

				; Prints MessagePointer's destination node name
 000008D3			PrintDestNode:
 000008D3  BA 00000336 R		mov edx, offset DestMsg
 000008D8  B9 00000014			mov ecx, sizeof DestMsg
 000008DD  03 D1			add edx, ecx
 000008DF  83 EA 02			sub edx, 2
 000008E2  B8 00000000			mov eax, 0
 000008E7  8B 3D 000006C7 R		mov edi, MessagePointer
 000008ED  8A 07			mov al, DESTINATION[edi]
 000008EF  88 02			mov [edx], al
 000008F1  BA 00000336 R		mov edx, offset DestMsg
 000008F6  E8 FFFFFE0D			call OutputMsg
 000008FB  E8 FFFFFE21			CALL OutputNewLine
 00000900  C3				ret

				; Prints the current echo mode
 00000901			PrintEchoMode:
 00000901  BA 00000328 R		mov edx, offset EchoMsg
 00000906  B9 00000006			mov ecx, sizeof EchoMsg
 0000090B  80 3D 00000712 R		cmp EchoBool, 1
	   01
 00000912  74 0A			je PrintEcho
 00000914  BA 0000032E R		mov edx, offset NoEchoMsg
 00000919  B9 00000008			mov ecx, sizeof NoEchoMsg
 0000091E				PrintEcho:
 0000091E  E8 FFFFFDE5				call OutputMsg
 00000923  E8 FFFFFDF9				call OutputNewLine
 00000928  C3					ret

				; Requires the sender name to be stored in bl
 00000929			FindSource:
 00000929  8B 3D 000006C1 R		mov edi, NodePointer
 0000092F  38 1F			cmp NAMEOFFSET[edi], bl
 00000931  74 2C			je FinishFind
 00000933  B9 00000000			mov ecx, 0
 00000938  8A 4F 01			mov cl, CONNECTOFFSET[edi]
 0000093B  83 C7 0E			add edi, NODESTRUCTSIZE
 0000093E  B8 0000000C			mov eax, CONNECTSIZE
 00000943  F7 E1			mul ecx
 00000945  03 F8			add edi, eax
 00000947  89 3D 000006C1 R		mov NodePointer, edi
 0000094D  3B 3D 000002DC R		cmp edi, EndOfNodes
 00000953  7C D4			jl FindSource
 00000955  C7 05 000006C1 R		mov NodePointer, offset NodeA
	   000001C8 R
 0000095F				FinishFind:
 0000095F  E8 0000005B				call PutPacket
 00000964  0F 82 FFFFF845			jc FinishUp
 0000096A  C3					ret

				; Prints to the console that there was an error writing to the file
 0000096B			ErrorWriting:
 0000096B  BA 00000358 R		mov edx, offset ErrorWriteMsg
 00000970  B9 00000028			mov ecx, sizeof ErrorWriteMsg
 00000975  E8 00000000 E		call WriteString
 0000097A  E9 00000126			jmp Quit

				; Creates an output file
 0000097F			OpenOutFile:
 0000097F  BA 00000380 R		mov edx, offset FileName
 00000984  B9 00000013			mov ecx, sizeof FileName
 00000989  E8 00000000 E		call CreateOutputFile
 0000098E  A3 000006BA R		mov OutFileHandle, eax
 00000993  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 00000996  74 13			je OutFileError
 00000998  C3				ret

				; Sets ecx bytes of the buffer in eax equal to 0
 00000999			ClearBuffer:
 00000999  B3 00			mov bl, 0
 0000099B  38 18			cmp [eax], bl
 0000099D  74 0B			je ClearDone
 0000099F  83 F9 00			cmp ecx, 0
 000009A2  74 06			je ClearDone
 000009A4  88 18			mov [eax], bl
 000009A6  40				inc eax
 000009A7  49				dec ecx
 000009A8  EB EF			jmp ClearBuffer
 000009AA			ClearDone:
 000009AA  C3				ret

				; Prints to the console that there was an error opening the file
 000009AB			OutFileError:
 000009AB  BA 00000615 R		mov edx, offset CreateOutErrorMsg
 000009B0  B9 0000002B			mov ecx, sizeof CreateOutErrorMsg
 000009B5  E8 00000000 E		call WriteString
 000009BA  E9 000000E6			jmp Quit

				; Puts a packet into the queue of the node in NodePointer and increments the node's output pointer
 000009BF			PutPacket:
 000009BF  89 35 000006EE R		mov Temp1, esi
 000009C5  89 3D 000006F2 R		mov Temp2, edi
 000009CB  89 1D 000006F6 R		mov Temp3, ebx
 000009D1  8B 15 000006C1 R		mov edx, NodePointer
 000009D7  8B 42 06			mov eax, INPUTOFFSET[edx]
 000009DA  83 C0 06			add eax, PACKETSIZE
 000009DD  8B 5A 02			mov ebx, QUEUEOFFSET[edx]
 000009E0  83 C3 3C			add ebx, FULLQUEUE
 000009E3  3B C3			cmp eax, ebx
 000009E5  7C 03			jl PutIt
 000009E7  8B 42 02			mov eax, QUEUEOFFSET[edx]
 000009EA				PutIt:
 000009EA  8B 5A 0A				mov ebx, OUTPUTOFFSET[edx]
 000009ED  3B C3				cmp eax, ebx
 000009EF  74 68				je QueueFull
 000009F1  FC					cld
 000009F2  8B 35 000006C7 R			mov esi, MessagePointer
 000009F8  8B 7A 06				mov edi, INPUTOFFSET[edx]
 000009FB  B9 00000006				mov ecx, PACKETSIZE
 00000A00  F3/ A4				rep movsb
 00000A02  89 42 06				mov INPUTOFFSET[edx], eax
 00000A05  8B 35 000006EE R			mov esi, Temp1
 00000A0B  8B 3D 000006F2 R			mov edi, Temp2
 00000A11  8B 1D 000006F6 R			mov ebx, Temp3
 00000A17  F8					clc
 00000A18  C3					ret

				; Puts the address of NodePointer's output queue packet into MessagePointer 
				; Then increments NodePointer's OutPointer so that it points at the next packet
 00000A19			GetPacket:
 00000A19  A3 000006EE R		mov Temp1, eax
 00000A1E  89 1D 000006F2 R		mov Temp2, ebx
 00000A24  8B 15 000006C1 R		mov edx, NodePointer	
 00000A2A  8B 5A 06			mov ebx, INPUTOFFSET[edx]
 00000A2D  8B 42 0A			mov eax, OUTPUTOFFSET[edx]
 00000A30  3B C3			cmp eax, ebx
 00000A32  74 4D			je QueueEmpty
 00000A34  A3 000006C7 R		mov MessagePointer, eax
 00000A39  83 C0 06			add eax, PACKETSIZE
 00000A3C  8B 5A 02			mov ebx, QUEUEOFFSET[edx]
 00000A3F  83 C3 3C			add ebx, FULLQUEUE
 00000A42  3B C3			cmp eax, ebx
 00000A44  7C 03			jl GetPContinued
 00000A46  8B 42 02			mov eax, QUEUEOFFSET[edx]
 00000A49				GetPContinued:
 00000A49  89 42 0A				mov OUTPUTOFFSET[edx], eax
 00000A4C  A1 000006EE R			mov eax, Temp1
 00000A51  8B 1D 000006F2 R			mov ebx, Temp2
 00000A57  F8					clc
 00000A58  C3					ret

				; Prints that the queue was full and sets the carry flag
 00000A59			QueueFull:
 00000A59  BA 00000654 R		mov edx, offset QueueFullMsg
 00000A5E  B9 00000013			mov ecx, sizeof QueueFullMsg
 00000A63  E8 FFFFFCA0			call OutputMsg
 00000A68  E8 FFFFFCB4			call OutputNewLine
 00000A6D  F9				stc
 00000A6E  8B 35 000006EE R		mov esi, Temp1
 00000A74  8B 3D 000006F2 R		mov edi, Temp2
 00000A7A  8B 1D 000006F6 R		mov ebx, Temp3
 00000A80  C3				ret

				; Sets the carry flag
 00000A81			QueueEmpty:
					;mov edx, offset QueueEmptyMsg
					;mov ecx, sizeof QueueEmptyMsg
					;call WriteString
 00000A81  F9				stc
 00000A82  A1 000006EE R		mov eax, Temp1
 00000A87  8B 1D 000006F2 R		mov ebx, Temp2
 00000A8D  C3				ret

				; Prints a carriage return and line feed to the console
 00000A8E			NextLine:
 00000A8E  89 15 000006EE R		mov Temp1, edx
 00000A94  BA 000006BE R		mov edx, offset NewLine
 00000A99  E8 00000000 E		call WriteString
 00000A9E  8B 15 000006EE R		mov edx, Temp1
 00000AA4  C3				ret

				; Ends the program
 00000AA5			Quit:
 00000AA5  A1 000006BA R		mov eax, OutFileHandle
 00000AAA  E8 00000000 E		call CloseFile
					exit
 00000AAF  6A 00	   *	    push   +000000000h
 00000AB1  E8 00000000 E   *	    call   ExitProcess
 00000AB6			main endp
				end main
Microsoft (R) Macro Assembler Version 14.24.28316.0	    04/28/20 13:04:04
: Network Simulato					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000713 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000AB6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000AB6 Public STDCALL
  Initialize . . . . . . . . . .	L Near	 00000000 _TEXT	
  MainLoop . . . . . . . . . . .	L Near	 000000D3 _TEXT	
  FinishUp . . . . . . . . . . .	L Near	 000001AF _TEXT	
  PrintConnections . . . . . . .	L Near	 000002E3 _TEXT	
  PrintConnectLoop . . . . . . .	L Near	 000002F3 _TEXT	
  NextConnect  . . . . . . . . .	L Near	 00000320 _TEXT	
  NextNode . . . . . . . . . . .	L Near	 0000034E _TEXT	
  Receive  . . . . . . . . . . .	L Near	 0000037C _TEXT	
  ReceiveLoop  . . . . . . . . .	L Near	 000003AB _TEXT	
  RcvConnectLoop . . . . . . . .	L Near	 000003F0 _TEXT	
  ContinueReceive  . . . . . . .	L Near	 00000465 _TEXT	
  RcvNextConnect . . . . . . . .	L Near	 0000047E _TEXT	
  RcvNextNode  . . . . . . . . .	L Near	 0000048B _TEXT	
  DestReached  . . . . . . . . .	L Near	 000004B3 _TEXT	
  Transmit . . . . . . . . . . .	L Near	 00000511 _TEXT	
  TransmitLoop . . . . . . . . .	L Near	 00000549 _TEXT	
  TransConnectLoop . . . . . . .	L Near	 00000616 _TEXT	
  SendPacket . . . . . . . . . .	L Near	 00000657 _TEXT	
  SkipSendPacket . . . . . . . .	L Near	 00000696 _TEXT	
  TransNextConnect . . . . . . .	L Near	 000006AA _TEXT	
  TransNextNode  . . . . . . . .	L Near	 000006B8 _TEXT	
  CopyPacket . . . . . . . . . .	L Near	 000006E0 _TEXT	
  OutputMsg  . . . . . . . . . .	L Near	 00000708 _TEXT	
  OutputNewLine  . . . . . . . .	L Near	 00000721 _TEXT	
  OutputMsgAndNum  . . . . . . .	L Near	 00000745 _TEXT	
  ConvertToString  . . . . . . .	L Near	 000007AD _TEXT	
  GetNumOfDigits . . . . . . . .	L Near	 000007E5 _TEXT	
  ConvertDigit . . . . . . . . .	L Near	 0000081F _TEXT	
  PrintSourceNode  . . . . . . .	L Near	 0000087A _TEXT	
  PrintTimeToLive  . . . . . . .	L Near	 000008AB _TEXT	
  PrintDestNode  . . . . . . . .	L Near	 000008D3 _TEXT	
  PrintEchoMode  . . . . . . . .	L Near	 00000901 _TEXT	
  PrintEcho  . . . . . . . . . .	L Near	 0000091E _TEXT	
  FindSource . . . . . . . . . .	L Near	 00000929 _TEXT	
  FinishFind . . . . . . . . . .	L Near	 0000095F _TEXT	
  ErrorWriting . . . . . . . . .	L Near	 0000096B _TEXT	
  OpenOutFile  . . . . . . . . .	L Near	 0000097F _TEXT	
  ClearBuffer  . . . . . . . . .	L Near	 00000999 _TEXT	
  ClearDone  . . . . . . . . . .	L Near	 000009AA _TEXT	
  OutFileError . . . . . . . . .	L Near	 000009AB _TEXT	
  PutPacket  . . . . . . . . . .	L Near	 000009BF _TEXT	
  PutIt  . . . . . . . . . . . .	L Near	 000009EA _TEXT	
  GetPacket  . . . . . . . . . .	L Near	 00000A19 _TEXT	
  GetPContinued  . . . . . . . .	L Near	 00000A49 _TEXT	
  QueueFull  . . . . . . . . . .	L Near	 00000A59 _TEXT	
  QueueEmpty . . . . . . . . . .	L Near	 00000A81 _TEXT	
  NextLine . . . . . . . . . . .	L Near	 00000A8E _TEXT	
  Quit . . . . . . . . . . . . .	L Near	 00000AA5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
AC . . . . . . . . . . . . . . .	Byte	 000001C9 _DATA	
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
APointB  . . . . . . . . . . . .	DWord	 000001D6 _DATA	
APointF  . . . . . . . . . . . .	DWord	 000001E2 _DATA	
ARcvB  . . . . . . . . . . . . .	Byte	 00000084 _DATA	
ARcvF  . . . . . . . . . . . . .	Byte	 000001BC _DATA	
ATransB  . . . . . . . . . . . .	Byte	 0000003C _DATA	
ATransF  . . . . . . . . . . . .	Byte	 00000042 _DATA	
AboutMsg . . . . . . . . . . . .	Byte	 00000546 _DATA	
ActPacks . . . . . . . . . . . .	Word	 000006D9 _DATA	
ActiveMsgsMsg1 . . . . . . . . .	Byte	 00000574 _DATA	
ActiveMsgsMsg2 . . . . . . . . .	Byte	 0000057F _DATA	
AtTimeMsg  . . . . . . . . . . .	Byte	 0000039C _DATA	
AverageHopMsg1 . . . . . . . . .	Byte	 00000590 _DATA	
AverageHopMsg2 . . . . . . . . .	Byte	 000005A9 _DATA	
AverageTimeMsg1  . . . . . . . .	Byte	 000005CD _DATA	
AverageTimeMsg2  . . . . . . . .	Byte	 000005E4 _DATA	
AvgHops  . . . . . . . . . . . .	DWord	 000006E5 _DATA	
AvgTime  . . . . . . . . . . . .	DWord	 000006E9 _DATA	
BC . . . . . . . . . . . . . . .	Byte	 000001EF _DATA	
BPointA  . . . . . . . . . . . .	DWord	 000001FC _DATA	
BPointC  . . . . . . . . . . . .	DWord	 00000208 _DATA	
BPointE  . . . . . . . . . . . .	DWord	 00000214 _DATA	
BRcvA  . . . . . . . . . . . . .	Byte	 0000003C _DATA	
BRcvC  . . . . . . . . . . . . .	Byte	 000000D2 _DATA	
BRcvE  . . . . . . . . . . . . .	Byte	 0000016E _DATA	
BTransA  . . . . . . . . . . . .	Byte	 00000084 _DATA	
BTransC  . . . . . . . . . . . .	Byte	 0000008A _DATA	
BTransE  . . . . . . . . . . . .	Byte	 00000090 _DATA	
BytesRead  . . . . . . . . . . .	DWord	 000006B2 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CC . . . . . . . . . . . . . . .	Byte	 00000221 _DATA	
CONNECTOFFSET  . . . . . . . . .	Number	 00000001h   
CONNECTSIZE  . . . . . . . . . .	Number	 0000000Ch   
CPointB  . . . . . . . . . . . .	DWord	 0000022E _DATA	
CPointD  . . . . . . . . . . . .	DWord	 0000023A _DATA	
CPointF  . . . . . . . . . . . .	DWord	 00000246 _DATA	
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CRcvB  . . . . . . . . . . . . .	Byte	 0000008A _DATA	
CRcvD  . . . . . . . . . . . . .	Byte	 00000120 _DATA	
CRcvF  . . . . . . . . . . . . .	Byte	 000001C2 _DATA	
CTAGOFFSET . . . . . . . . . . .	Number	 0000000Bh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CTransB  . . . . . . . . . . . .	Byte	 000000D2 _DATA	
CTransD  . . . . . . . . . . . .	Byte	 000000D8 _DATA	
CTransF  . . . . . . . . . . . .	Byte	 000000DE _DATA	
ConnectTag . . . . . . . . . . .	Byte	 000002ED _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CreateOutErrorMsg  . . . . . . .	Byte	 00000615 _DATA	
DC . . . . . . . . . . . . . . .	Byte	 00000253 _DATA	
DESTINATION  . . . . . . . . . .	Number	 00000000h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DPointC  . . . . . . . . . . . .	DWord	 00000260 _DATA	
DPointE  . . . . . . . . . . . .	DWord	 0000026C _DATA	
DRcvC  . . . . . . . . . . . . .	Byte	 000000D8 _DATA	
DRcvE  . . . . . . . . . . . . .	Byte	 00000168 _DATA	
DTransC  . . . . . . . . . . . .	Byte	 00000120 _DATA	
DTransE  . . . . . . . . . . . .	Byte	 00000126 _DATA	
DestMsg  . . . . . . . . . . . .	Byte	 00000336 _DATA	
Digits . . . . . . . . . . . . .	DWord	 00000706 _DATA	
EC . . . . . . . . . . . . . . .	Byte	 00000279 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
EPointB  . . . . . . . . . . . .	DWord	 0000029E _DATA	
EPointD  . . . . . . . . . . . .	DWord	 00000286 _DATA	
EPointF  . . . . . . . . . . . .	DWord	 00000292 _DATA	
ERcvB  . . . . . . . . . . . . .	Byte	 00000090 _DATA	
ERcvD  . . . . . . . . . . . . .	Byte	 00000126 _DATA	
ERcvF  . . . . . . . . . . . . .	Byte	 000001B6 _DATA	
ETransB  . . . . . . . . . . . .	Byte	 0000016E _DATA	
ETransD  . . . . . . . . . . . .	Byte	 00000168 _DATA	
ETransF  . . . . . . . . . . . .	Byte	 00000174 _DATA	
EchoBool . . . . . . . . . . . .	Byte	 00000712 _DATA	
EchoMsg  . . . . . . . . . . . .	Byte	 00000328 _DATA	
EndOfNodes . . . . . . . . . . .	DWord	 000002DC _DATA	
ErrorWriteMsg  . . . . . . . . .	Byte	 00000358 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FC . . . . . . . . . . . . . . .	Byte	 000002AB _DATA	
FILEBUFFSIZE . . . . . . . . . .	Number	 00000064h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FPointA  . . . . . . . . . . . .	DWord	 000002B8 _DATA	
FPointC  . . . . . . . . . . . .	DWord	 000002D0 _DATA	
FPointE  . . . . . . . . . . . .	DWord	 000002C4 _DATA	
FRcvA  . . . . . . . . . . . . .	Byte	 00000042 _DATA	
FRcvC  . . . . . . . . . . . . .	Byte	 000000DE _DATA	
FRcvE  . . . . . . . . . . . . .	Byte	 00000174 _DATA	
FTransA  . . . . . . . . . . . .	Byte	 000001BC _DATA	
FTransC  . . . . . . . . . . . .	Byte	 000001C2 _DATA	
FTransE  . . . . . . . . . . . .	Byte	 000001B6 _DATA	
FULLQUEUE  . . . . . . . . . . .	Number	 0000003Ch   
FileName . . . . . . . . . . . .	Byte	 00000380 _DATA	
Float100 . . . . . . . . . . . .	DWord	 0000070E _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GenPacks . . . . . . . . . . . .	Word	 000006D5 _DATA	
GeneratedMsg . . . . . . . . . .	Byte	 000003C6 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUTOFFSET  . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
InFileHandle . . . . . . . . . .	DWord	 000006B6 _DATA	
InitPacket . . . . . . . . . . .	Byte	 000002E0 _DATA	
InitRecTime  . . . . . . . . . .	Word	 000002E4 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MaxHops  . . . . . . . . . . . .	Byte	 000006ED _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
MessagePointer . . . . . . . . .	DWord	 000006C7 _DATA	
MsgDiedMsg . . . . . . . . . . .	Byte	 00000640 _DATA	
MsgNotSentMsg  . . . . . . . . .	Byte	 00000400 _DATA	
MsgRcvdMsg . . . . . . . . . . .	Byte	 000004A5 _DATA	
MsgReachedMsg  . . . . . . . . .	Byte	 000004C5 _DATA	
MsgSentMsg . . . . . . . . . . .	Byte	 000003E7 _DATA	
MsgsActiveMsg  . . . . . . . . .	Byte	 00000428 _DATA	
MsgsExistMsg . . . . . . . . . .	Byte	 00000477 _DATA	
MsgsHaveMsg  . . . . . . . . . .	Byte	 0000043B _DATA	
NAMEOFFSET . . . . . . . . . . .	Number	 00000000h   
NODECONNECT  . . . . . . . . . .	Number	 00000000h   
NODESTRUCTSIZE . . . . . . . . .	Number	 0000000Eh   
NTAGOFFSET . . . . . . . . . . .	Number	 00000005h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMBUFFSIZE  . . . . . . . . . .	Number	 0000000Ah   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NewLine  . . . . . . . . . . . .	Byte	 000006BE _DATA	
NewPacks . . . . . . . . . . . .	Word	 000006D3 _DATA	
NoEchoMsg  . . . . . . . . . . .	Byte	 0000032E _DATA	
NodeA  . . . . . . . . . . . . .	Byte	 000001C8 _DATA	
NodeB  . . . . . . . . . . . . .	Byte	 000001EE _DATA	
NodeC  . . . . . . . . . . . . .	Byte	 00000220 _DATA	
NodeD  . . . . . . . . . . . . .	Byte	 00000252 _DATA	
NodeE  . . . . . . . . . . . . .	Byte	 00000278 _DATA	
NodeFrom . . . . . . . . . . . .	Byte	 000006C6 _DATA	
NodeF  . . . . . . . . . . . . .	Byte	 000002AA _DATA	
NodeName . . . . . . . . . . . .	Byte	 000006C5 _DATA	
NodePointer  . . . . . . . . . .	DWord	 000006C1 _DATA	
NodeTag  . . . . . . . . . . . .	Byte	 000002E6 _DATA	
NumberBuffer . . . . . . . . . .	Byte	 000006A8 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
ORIGIN . . . . . . . . . . . . .	Number	 00000002h   
OUTPUTOFFSET . . . . . . . . . .	Number	 0000000Ah   
OutFileHandle  . . . . . . . . .	DWord	 000006BA _DATA	
OutputNum  . . . . . . . . . . .	DWord	 000006DF _DATA	
PACKETSIZE . . . . . . . . . . .	Number	 00000006h   
PARcvB . . . . . . . . . . . . .	DWord	 000001DE _DATA	
PARcvF . . . . . . . . . . . . .	DWord	 000001EA _DATA	
PATransB . . . . . . . . . . . .	DWord	 000001DA _DATA	
PATransF . . . . . . . . . . . .	DWord	 000001E6 _DATA	
PBRcvA . . . . . . . . . . . . .	DWord	 00000204 _DATA	
PBRcvC . . . . . . . . . . . . .	DWord	 00000210 _DATA	
PBRcvE . . . . . . . . . . . . .	DWord	 0000021C _DATA	
PBTransA . . . . . . . . . . . .	DWord	 00000200 _DATA	
PBTransC . . . . . . . . . . . .	DWord	 0000020C _DATA	
PBTransE . . . . . . . . . . . .	DWord	 00000218 _DATA	
PCRcvB . . . . . . . . . . . . .	DWord	 00000236 _DATA	
PCRcvD . . . . . . . . . . . . .	DWord	 00000242 _DATA	
PCRcvF . . . . . . . . . . . . .	DWord	 0000024E _DATA	
PCTransB . . . . . . . . . . . .	DWord	 00000232 _DATA	
PCTransD . . . . . . . . . . . .	DWord	 0000023E _DATA	
PCTransF . . . . . . . . . . . .	DWord	 0000024A _DATA	
PDRcvC . . . . . . . . . . . . .	DWord	 00000268 _DATA	
PDRcvE . . . . . . . . . . . . .	DWord	 00000274 _DATA	
PDTransC . . . . . . . . . . . .	DWord	 00000264 _DATA	
PDTransE . . . . . . . . . . . .	DWord	 00000270 _DATA	
PERcvB . . . . . . . . . . . . .	DWord	 000002A6 _DATA	
PERcvD . . . . . . . . . . . . .	DWord	 0000028E _DATA	
PERcvF . . . . . . . . . . . . .	DWord	 0000029A _DATA	
PETransB . . . . . . . . . . . .	DWord	 000002A2 _DATA	
PETransD . . . . . . . . . . . .	DWord	 0000028A _DATA	
PETransF . . . . . . . . . . . .	DWord	 00000296 _DATA	
PFRcvA . . . . . . . . . . . . .	DWord	 000002C0 _DATA	
PFRcvC . . . . . . . . . . . . .	DWord	 000002D8 _DATA	
PFRcvE . . . . . . . . . . . . .	DWord	 000002CC _DATA	
PFTransA . . . . . . . . . . . .	DWord	 000002BC _DATA	
PFTransC . . . . . . . . . . . .	DWord	 000002D4 _DATA	
PFTransE . . . . . . . . . . . .	DWord	 000002C8 _DATA	
PQueueA  . . . . . . . . . . . .	DWord	 000001CA _DATA	
PQueueB  . . . . . . . . . . . .	DWord	 000001F0 _DATA	
PQueueC  . . . . . . . . . . . .	DWord	 00000222 _DATA	
PQueueD  . . . . . . . . . . . .	DWord	 00000254 _DATA	
PQueueE  . . . . . . . . . . . .	DWord	 0000027A _DATA	
PQueueF  . . . . . . . . . . . .	DWord	 000002AC _DATA	
PacketInfoMsg  . . . . . . . . .	Byte	 00000309 _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PercentRcvdMsg . . . . . . . . .	Byte	 0000054D _DATA	
Power  . . . . . . . . . . . . .	DWord	 00000702 _DATA	
ProcMsg  . . . . . . . . . . . .	Byte	 0000034A _DATA	
ProcRcvMsg . . . . . . . . . . .	Byte	 00000498 _DATA	
QUEUEOFFSET  . . . . . . . . . .	Number	 00000002h   
QUEUESIZE  . . . . . . . . . . .	Number	 0000000Ah   
QueueAIn . . . . . . . . . . . .	DWord	 000001CE _DATA	
QueueAOut  . . . . . . . . . . .	DWord	 000001D2 _DATA	
QueueA . . . . . . . . . . . . .	Byte	 00000000 _DATA	
QueueBIn . . . . . . . . . . . .	DWord	 000001F4 _DATA	
QueueBOut  . . . . . . . . . . .	DWord	 000001F8 _DATA	
QueueB . . . . . . . . . . . . .	Byte	 00000048 _DATA	
QueueCIn . . . . . . . . . . . .	DWord	 00000226 _DATA	
QueueCOut  . . . . . . . . . . .	DWord	 0000022A _DATA	
QueueC . . . . . . . . . . . . .	Byte	 00000096 _DATA	
QueueDIn . . . . . . . . . . . .	DWord	 00000258 _DATA	
QueueDOut  . . . . . . . . . . .	DWord	 0000025C _DATA	
QueueD . . . . . . . . . . . . .	Byte	 000000E4 _DATA	
QueueEIn . . . . . . . . . . . .	DWord	 0000027E _DATA	
QueueEOut  . . . . . . . . . . .	DWord	 00000282 _DATA	
QueueEmptyMsg  . . . . . . . . .	Byte	 00000667 _DATA	
QueueE . . . . . . . . . . . . .	Byte	 0000012C _DATA	
QueueFIn . . . . . . . . . . . .	DWord	 000002B0 _DATA	
QueueFOut  . . . . . . . . . . .	DWord	 000002B4 _DATA	
QueueFullMsg . . . . . . . . . .	Byte	 00000654 _DATA	
QueueF . . . . . . . . . . . . .	Byte	 0000017A _DATA	
QueueSizeMsg1  . . . . . . . . .	Byte	 0000067A _DATA	
QueueSizeMsg2  . . . . . . . . .	Byte	 0000069F _DATA	
RECEIVED . . . . . . . . . . . .	Number	 00000004h   
RECEIVEOFFSET  . . . . . . . . .	Number	 00000008h   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
RecPacks . . . . . . . . . . . .	Word	 000006DB _DATA	
ReceiveMsg . . . . . . . . . . .	Byte	 000003A7 _DATA	
Result . . . . . . . . . . . . .	DWord	 0000070A _DATA	
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SENDER . . . . . . . . . . . . .	Number	 00000001h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SourceMsg  . . . . . . . . . . .	Byte	 000002FA _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TIMEOUT  . . . . . . . . . . . .	Number	 00000003h   
TRANSOFFSET  . . . . . . . . . .	Number	 00000004h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TTLMsg . . . . . . . . . . . . .	Byte	 00000322 _DATA	
Temp1  . . . . . . . . . . . . .	DWord	 000006EE _DATA	
Temp2  . . . . . . . . . . . . .	DWord	 000006F2 _DATA	
Temp3  . . . . . . . . . . . . .	DWord	 000006F6 _DATA	
Temp4  . . . . . . . . . . . . .	DWord	 000006FA _DATA	
Temp5  . . . . . . . . . . . . .	DWord	 000006FE _DATA	
TempPacket . . . . . . . . . . .	Byte	 000006CB _DATA	
ThereMsg . . . . . . . . . . . .	Byte	 0000041D _DATA	
TimeMsg  . . . . . . . . . . . .	Byte	 00000393 _DATA	
Time . . . . . . . . . . . . . .	Word	 000006D1 _DATA	
TotMsgsGenMsg1 . . . . . . . . .	Byte	 0000051C _DATA	
TotMsgsGenMsg2 . . . . . . . . .	Byte	 00000532 _DATA	
TotPacks . . . . . . . . . . . .	Word	 000006D7 _DATA	
TotTimeMsg1  . . . . . . . . . .	Byte	 000004F7 _DATA	
TotTimeMsg2  . . . . . . . . . .	Byte	 00000514 _DATA	
TotalHops  . . . . . . . . . . .	Word	 000006E3 _DATA	
TotalTime  . . . . . . . . . . .	Word	 000006DD _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
