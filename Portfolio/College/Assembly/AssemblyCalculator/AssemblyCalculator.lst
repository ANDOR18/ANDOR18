Microsoft (R) Macro Assembler Version 14.24.28316.0	    02/24/20 17:22:47
: Program 2 Assembly Calculato				     Page 1 - 1


				Title: Program 2 Assembly Calculator
				; Group 2 Members: Nathaniel DeHart, Kevin Andor, Matt Oblock

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 = 00000008			STACKSIZE equ 8
 00000000  00000008 [		MyStack sdword STACKSIZE dup(' ')
	    00000020
	   ]
 00000020 41 73 73 65 6D	Prompt1 byte "Assembly Calculator", 13, 10, 0
	   62 6C 79 20 43
	   61 6C 63 75 6C
	   61 74 6F 72 0D
	   0A 00
 00000036 53 54 41 43 4B	OvFlowMsg byte "STACK OVERFLOW!", 13, 10, 0
	   20 4F 56 45 52
	   46 4C 4F 57 21
	   0D 0A 00
 00000048 49 4E 56 41 4C	InvalidMsg byte "INVALID ENTRY", 13, 10, 0
	   49 44 20 45 4E
	   54 52 59 0D 0A
	   00
 00000058 54 48 45 20 45	ValueTooLarge byte "THE ENTERED NUMBER WAS TOO LARGE", 13, 10, 0
	   4E 54 45 52 45
	   44 20 4E 55 4D
	   42 45 52 20 57
	   41 53 20 54 4F
	   4F 20 4C 41 52
	   47 45 0D 0A 00
 0000007B 54 48 45 20 53	InvalidSize byte "THE STACK IS TOO SMALL FOR THE SELECTED OPERATION!", 13, 10, 0
	   54 41 43 4B 20
	   49 53 20 54 4F
	   4F 20 53 4D 41
	   4C 4C 20 46 4F
	   52 20 54 48 45
	   20 53 45 4C 45
	   43 54 45 44 20
	   4F 50 45 52 41
	   54 49 4F 4E 21
	   0D 0A 00
 000000B0 20 0D 0A 00		Newline byte " ", 13, 10, 0
 = 00000010			BUFFERSIZE equ 16
 000000B4 00000000		InpIndex dword 0
 000000B8 FFFFFFFF		StackIndex sdword -1
 000000BC  00000010 [		Input byte BUFFERSIZE dup(' ')
	    20
	   ]
 000000CC 00			Negative byte 0
 000000CD 00000000		TempResult dword 0
 000000D1 00000000		TempIndex dword 0
 000000D5 00000000		Power dword 0

 00000000			.code
 00000000			Main proc
 00000000  E9 00000376		jmp PrintTop
				; Gets the user input and hides entered spaces
 00000005			Menu:
 00000005  E8 00000043			call ClearInput
 0000000A  C6 05 000000CC R		mov Negative, 0
	   00
 00000011  C7 05 000000B4 R		mov InpIndex, 0
	   00000000
 0000001B  BE 00000000			mov esi, 0
 00000020  B9 00000010			mov ecx, BufferSize
 00000025  BA 000000BC R		mov edx, offset Input
 0000002A  E8 00000000 E		call ReadString
 0000002F  BA 00000000			mov edx, 0
 00000034  8B 3D 000000B4 R		mov edi, InpIndex
 0000003A  0F B6 9F			movzx ebx, [Input + edi]
	   000000BC R
 00000041  83 FB 20			cmp ebx, ' '
 00000044  74 1A			je SkipSpace
 00000046  83 FB 09			cmp ebx, 09h
 00000049  74 15			je SkipSpace
 0000004B  EB 32			jmp NoSpaces
				; 
 0000004D			ClearInput:
 0000004D  B9 00000000			mov ecx, 0
 00000052				ClearLoop:
 00000052  C6 81 000000BC R			mov [input + ecx], ' '
	   20
 00000059  41					inc ecx
 0000005A  83 F9 10				cmp ecx, BUFFERSIZE
 0000005D  7C F3				jl ClearLoop
 0000005F  C3					ret
				; Increments the input index until a value other than a space was entered
 00000060			SkipSpace:
 00000060  FF 05 000000B4 R		inc InpIndex
 00000066  8B 3D 000000B4 R		mov edi, InpIndex
 0000006C  0F B6 9F			movzx ebx, [Input + edi]
	   000000BC R
 00000073  83 FB 20			cmp ebx, ' '
 00000076  74 E8			je SkipSpace
 00000078  83 FB 09			cmp ebx, 09h
 0000007B  74 E3			je SkipSpace
 0000007D  EB 00			jmp NoSpaces
				; Determines what the kind of the data that was entered
 0000007F			NoSpaces:
 0000007F  8B 3D 000000B4 R		mov edi, InpIndex
 00000085  0F B6 9F			movzx ebx, [Input + edi]
	   000000BC R
 0000008C  83 FB 2D			cmp ebx, '-'
 0000008F  74 15			je SignOrSubtract
 00000091  83 FB 30			cmp ebx, '0'
 00000094  7C 49			jl IsSymbol
 00000096  88 9F 000000BC R		mov [Input + edi], bl
 0000009C  83 FB 39			cmp ebx, '9'
 0000009F  7F 3E			jg IsSymbol
 000000A1  E9 000002A0			jmp Digit
				; Determines whether an entered minus sign for negation or subtraction
 000000A6			SignOrSubtract:
					; Looks at the character after '-'
 000000A6  0F B6 8F			movzx ecx, [Input + edi + 1]
	   000000BD R
 000000AD  83 F9 30			cmp ecx, '0'
 000000B0  7C 2D			jl IsSymbol
 000000B2  83 F9 39			cmp ecx, '9'
 000000B5  7F 28			jg IsSymbol
 000000B7  C6 05 000000CC R		mov Negative, 1
	   01
 000000BE  E9 00000283			jmp Digit

				; Negates the value stored in edx
 000000C3			IsNegative:
 000000C3  8B 35 000000B8 R		mov esi, StackIndex
 000000C9  6B F6 04			imul esi, 4
 000000CC  8B 86 00000000 R		mov eax, [MyStack + esi]
 000000D2  F7 D8			neg eax
 000000D4  89 86 00000000 R		mov [MyStack + esi], eax
 000000DA  E9 0000029C			jmp PrintTop
				; Jumps to the function corresponding to the character that was entered
 000000DF			IsSymbol:
 000000DF  83 FB 6E			cmp ebx, 'n'   
 000000E2  74 DF			je IsNegative
 000000E4  83 FB 4E			cmp ebx, 'N'
 000000E7  74 DA			je IsNegative
 000000E9  83 FB 76			cmp ebx, 'v'
 000000EC  0F 84 00000374		je ViewAll
 000000F2  83 FB 56			cmp ebx, 'V'
 000000F5  0F 84 0000036B		je ViewAll
 000000FB  83 FB 63			cmp ebx, 'c'
 000000FE  0F 84 00000102		je ClearStack
 00000104  83 FB 43			cmp ebx, 'C'
 00000107  0F 84 000000F9		je ClearStack
 0000010D  83 FB 71			cmp ebx, 'q'
 00000110  0F 84 00000398		je Quit
 00000116  83 FB 51			cmp ebx, 'Q'
 00000119  0F 84 0000038F		je Quit
 0000011F  83 FB 75			cmp ebx, 'u'
 00000122  0F 84 0000028D		je RollUp
 00000128  83 FB 55			cmp ebx, 'U'
 0000012B  0F 84 00000284		je RollUp
 00000131  83 FB 64			cmp ebx, 'd'
 00000134  0F 84 000002C6		je RollDown
 0000013A  83 FB 44			cmp ebx, 'D'
 0000013D  0F 84 000002BD		je RollDown
 00000143  83 FB 2D			cmp ebx, '-'
 00000146  74 2A			je SubtractNum
 00000148  83 FB 2B			cmp ebx, '+'
 0000014B  74 4A			je AddNum
 0000014D  83 FB 2F			cmp ebx, '/'
 00000150  74 6A			je DivideNum
 00000152  83 FB 2A			cmp ebx, '*'
 00000155  0F 84 00000089		je MultiplyNum
 0000015B  83 FB 78			cmp ebx, 'x'
 0000015E  0F 84 000000B6		je XChng
 00000164  83 FB 58			cmp ebx, 'X'
 00000167  0F 84 000000AD		je XChng
 0000016D  E9 0000032D			jmp InputError

				; Subtracts the top element of the stack from the second highest element of the stack
 00000172			SubtractNum:
 00000172  83 3D 000000B8 R		cmp StackIndex, 1
	   01
 00000179  0F 8C 000000CA		jl StackTooSmall
 0000017F  E8 00000197			call PopStack
 00000184  8B 86 00000000 R		mov eax, [MyStack + esi]
 0000018A  2B C2			sub eax, edx
 0000018C  89 86 00000000 R		mov [MyStack + esi], eax
 00000192  E9 000001E4			jmp PrintTop

				; Adds the top element of the stack from the second highest element of the stack
 00000197			AddNum:
 00000197  83 3D 000000B8 R		cmp StackIndex, 1
	   01
 0000019E  0F 8C 000000A5		jl StackTooSmall
 000001A4  E8 00000172			call PopStack
 000001A9  8B 86 00000000 R		mov eax, [MyStack + esi]
 000001AF  03 C2			add eax, edx
 000001B1  89 86 00000000 R		mov [MyStack + esi], eax
 000001B7  E9 000001BF			jmp PrintTop

				; Divides the top element of the stack from the second highest element of the stack
 000001BC			DivideNum:
 000001BC  83 3D 000000B8 R		cmp StackIndex, 1
	   01
 000001C3  0F 8C 00000080		jl StackTooSmall
 000001C9  E8 0000014D			call PopStack
 000001CE  8B DA			mov ebx, edx
 000001D0  8B 86 00000000 R		mov eax, [MyStack + esi]
 000001D6  99				cdq
 000001D7  F7 FB			idiv ebx
 000001D9  89 86 00000000 R		mov [MyStack + esi], eax
 000001DF  E9 00000197			jmp PrintTop

				; Multiplies the top two elements of the stack 
 000001E4			MultiplyNum:
 000001E4  83 3D 000000B8 R		cmp StackIndex, 1
	   01
 000001EB  7C 5C			jl StackTooSmall
 000001ED  E8 00000129			call PopStack
 000001F2  8B 9E 00000000 R		mov ebx, [Mystack + esi]
 000001F8  0F AF D3			imul edx, ebx
 000001FB  89 96 00000000 R		mov [Mystack + esi], edx
 00000201  E9 00000175			jmp PrintTop
				; Clears all of the values in the stack
 00000206			ClearStack:
 00000206  83 3D 000000B8 R		cmp StackIndex, -1
	   FF
 0000020D  0F 84 00000168		je PrintTop
 00000213  E8 00000103			call PopStack
 00000218  EB EC			jmp ClearStack
				; Swaps the data stored in the top two elements of the stack
 0000021A			XChng:
 0000021A  83 3D 000000B8 R		cmp StackIndex, 1
	   01
 00000221  7C 26			jl StackTooSmall
 00000223  8B 35 000000B8 R		mov esi, StackIndex
 00000229  6B F6 04			imul esi, 4
 0000022C  8B 86 00000000 R		mov eax, [MyStack + esi]
 00000232  8B 9E FFFFFFFC R		mov ebx, [MyStack + esi - 4]
 00000238  89 9E 00000000 R		mov [MyStack + esi], ebx
 0000023E  89 86 FFFFFFFC R		mov [MyStack + esi - 4], eax
 00000244  E9 00000132			jmp PrintTop
				; Prints that the stack is too small for the selected operation
 00000249			StackTooSmall:
 00000249  BA 0000007B R		mov edx, offset InvalidSize
 0000024E  E8 00000000 E		call WriteString
 00000253  E9 00000123			jmp PrintTop

				; Requires a pointer to some string to be stored in eax, the starting index in edi, and the max size stored in ecx
				; Stores the integer in edx
 00000258			ConvertToInt:
 00000258  C7 05 000000CD R		mov TempResult, 0
	   00000000
 00000262  89 0D 000000D1 R		mov TempIndex, ecx
 00000268  BE 00000000			mov esi, 0
 0000026D  BB 00000000			mov ebx, 0
 00000272  BA 00000000			mov edx, 0
 00000277  03 05 000000D1 R		add eax, TempIndex
 0000027D  39 3D 000000D1 R		cmp TempIndex, edi
 00000283  7D 05			jge IntLoop
					; No numbers entered
 00000285  E9 00000215			jmp InputError
 0000028A				IntLoop:
 0000028A  FF 0D 000000D1 R			dec TempIndex
 00000290  48					dec eax
 00000291  39 3D 000000D1 R			cmp TempIndex, edi
 00000297  7D 07				jge IntContinue
 00000299  8B 15 000000CD R			mov edx, TempResult
 0000029F  C3					ret
 000002A0				IntContinue:
 000002A0  BB 00000000				mov ebx, 0
 000002A5  8A 18				mov bl, [eax]
 000002A7  0F B6 DB				movzx ebx, bl
 000002AA  83 EB 30				sub ebx, 30h
 000002AD  83 FB 00				cmp ebx, 0
 000002B0  7C D8				jl IntLoop
 000002B2  83 FB 09				cmp ebx, 9
 000002B5  7F D3				jg IntLoop
 000002B7  46					inc esi
 000002B8  83 FE 0A				cmp esi, 10
 000002BB  7F 0D				jg NumTooBig
 000002BD  E8 00000017				call PowerTen
 000002C2  01 1D 000000CD R			add TempResult, ebx
 000002C8  EB C0				jmp IntLoop
				; Prints that the number that was entered is too large
 000002CA			NumTooBig:
 000002CA  BA 00000058 R		mov edx, offset ValueTooLarge
 000002CF  E8 00000000 E		call WriteString
 000002D4  E9 000000A2			jmp PrintTop
				; Multiplies ebx by 10 esi times
 000002D9			PowerTen:
 000002D9  89 35 000000D5 R		mov Power, esi
 000002DF  83 3D 000000D5 R		cmp Power, 1
	   01
 000002E6  7F 01			jg PowerTenLoop
 000002E8  C3				ret
 000002E9				PowerTenLoop:
 000002E9  FF 0D 000000D5 R			dec Power
 000002EF  6B DB 0A				imul ebx, 10
 000002F2  83 3D 000000D5 R			cmp Power, 1
	   01
 000002F9  7F EE				jg PowerTenLoop
 000002FB  C3					ret
				; Increments the index of the stack and then enters the data stored in eax into the top of the stack
 000002FC			PushStack:
 000002FC  83 3D 000000B8 R		cmp StackIndex, STACKSIZE - 1
	   07
 00000303  7D 35			jge StackOverflow
 00000305  FF 05 000000B8 R		inc StackIndex
 0000030B  8B 35 000000B8 R		mov esi, StackIndex
					; Multiplies the index by four because each element of the stack is four bytes
 00000311  6B F6 04			imul esi, 4
 00000314  89 86 00000000 R		mov [MyStack + esi], eax
 0000031A  C3				ret
				; Moves the value stored at the top of the stack into edx and decrements the stack index
 0000031B			PopStack:
 0000031B  8B 35 000000B8 R		mov esi, StackIndex
 00000321  6B F6 04			imul esi, 4
 00000324  8B 96 00000000 R		mov edx, [MyStack + esi]
 0000032A  FF 0D 000000B8 R		dec StackIndex
 00000330  8B 35 000000B8 R		mov esi, StackIndex
 00000336  6B F6 04			imul esi, 4
 00000339  C3				ret 
				; Prints that the stack is already full
 0000033A			StackOverflow:
 0000033A  BA 00000036 R		mov edx, offset OvFlowMsg
 0000033F  E8 00000000 E		call WriteString
 00000344  EB 35			jmp PrintTop
				; Converts the string into an integer and places it on the stack
 00000346			Digit:
 00000346  8B 3D 000000B4 R		mov edi, InpIndex
 0000034C  BA 00000000			mov edx, 0
 00000351  B8 000000BC R		mov eax, offset Input
 00000356  B9 00000010			mov ecx, BUFFERSIZE
 0000035B  E8 FFFFFEF8			call ConvertToInt
 00000360  B8 00000000			mov eax, 0
 00000365  8B C2			mov eax, edx
 00000367  E8 FFFFFF90			call PushStack
 0000036C  80 3D 000000CC R		cmp Negative, 1
	   01
 00000373  0F 84 FFFFFD4A		je IsNegative
 00000379  EB 00			jmp PrintTop
				; Prints the top element in the stack if one exists and prints "Assembly Calculator"
 0000037B			PrintTop:
 0000037B  BA 00000020 R		mov edx, offset Prompt1
 00000380  E8 00000000 E		call WriteString
 00000385  83 3D 000000B8 R		cmp StackIndex, 0
	   00
 0000038C  0F 8C FFFFFC73		jl Menu
 00000392  8B 35 000000B8 R		mov esi, StackIndex
 00000398  6B F6 04			imul esi, 4
 0000039B  8B 86 00000000 R		mov eax, [MyStack + esi]
 000003A1  E8 00000000 E		call WriteInt
 000003A6  BA 000000B0 R		mov edx, offset Newline
 000003AB  E8 00000000 E		call WriteString
 000003B0  E9 FFFFFC50			jmp Menu
				; Moves every existing element in the stack up a slot and places the top element into the bottom of the stack
 000003B5			RollUp:
 000003B5  83 3D 000000B8 R		cmp StackIndex, 1
	   01
 000003BC  0F 8C FFFFFE87		jl StackTooSmall
 000003C2  8B 35 000000B8 R		mov esi, StackIndex
 000003C8  89 35 000000D1 R		mov TempIndex, esi
 000003CE  6B F6 04			imul esi, 4
 000003D1  8B 9E 00000000 R		mov ebx, [MyStack + esi]
 000003D7				RollUpLoop:
 000003D7  83 FE 00				cmp esi, 0
 000003DA  7C 0D				jl RollUpDone
 000003DC  E8 FFFFFF3A				call PopStack
 000003E1  89 96 00000008 R			mov [MyStack + esi + 8], edx
 000003E7  EB EE				jmp RollUpLoop
 000003E9				RollUpDone:
 000003E9  89 1D 00000000 R			mov [MyStack], ebx
 000003EF  8B 35 000000D1 R			mov esi, TempIndex
 000003F5  89 35 000000B8 R			mov StackIndex, esi
 000003FB  E9 FFFFFF7B				jmp PrintTop
				; Moves every existing element in the stack down a slot and places the bottom element into the top of the stack
 00000400			RollDown:
 00000400  83 3D 000000B8 R		cmp StackIndex, 1
	   01
 00000407  0F 8C FFFFFE3C		jl StackTooSmall
 0000040D  8B 35 000000B8 R		mov esi, StackIndex
 00000413  89 35 000000D1 R		mov TempIndex, esi
 00000419  6B F6 04			imul esi, 4
 0000041C  8B 1D 00000000 R		mov ebx, [MyStack]
 00000422  BE FFFFFFFC			mov esi, -4
 00000427  C7 05 000000B8 R		mov StackIndex, -1
	   FFFFFFFF
 00000431				RollDownLoop:
 00000431  8B 3D 000000B8 R			mov edi, StackIndex
 00000437  3B 3D 000000D1 R			cmp edi, TempIndex
 0000043D  7D 0D				jge RollDownDone
 0000043F  8B 86 00000008 R			mov eax, [MyStack + esi + 8]
 00000445  E8 FFFFFEB2				call PushStack
 0000044A  EB E5				jmp RollDownLoop
 0000044C				RollDownDone:
 0000044C  8B 35 000000D1 R			mov esi, TempIndex
 00000452  89 35 000000B8 R			mov StackIndex, esi
 00000458  6B F6 04				imul esi, 4
 0000045B  89 9E 00000000 R			mov [MyStack + esi], ebx
 00000461  E9 FFFFFF15				jmp PrintTop
				; Prints all of the values stored in the stack
 00000466			ViewAll:
 00000466  83 3D 000000B8 R		cmp StackIndex, 0
	   00
 0000046D  0F 8C FFFFFDD6		jl StackTooSmall
 00000473  8B 35 000000B8 R		mov esi, StackIndex
 00000479  6B F6 04			imul esi, 4
 0000047C				ViewLoop:
 0000047C  8B 86 00000000 R			mov eax, [MyStack + esi]
 00000482  E8 00000000 E			call WriteInt
 00000487  BA 000000B0 R			mov edx, offset Newline
 0000048C  E8 00000000 E			call WriteString
 00000491  83 EE 04				sub esi, 4
 00000494  83 FE 00				cmp esi, 0
 00000497  0F 8C FFFFFEDE			jl PrintTop
 0000049D  EB DD				jmp ViewLoop
				; Prints when the user enters an invalid character
 0000049F			InputError:
 0000049F  BA 00000048 R		mov edx, offset InvalidMsg
 000004A4  E8 00000000 E		call WriteString
 000004A9  E9 FFFFFECD			jmp PrintTop

 000004AE			Quit:
 000004AE			Main endp
				end Main
Microsoft (R) Macro Assembler Version 14.24.28316.0	    02/24/20 17:22:47
: Program 2 Assembly Calculato				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000D9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004AE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000004AE Public STDCALL
  Menu . . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  ClearInput . . . . . . . . . .	L Near	 0000004D _TEXT	
  ClearLoop  . . . . . . . . . .	L Near	 00000052 _TEXT	
  SkipSpace  . . . . . . . . . .	L Near	 00000060 _TEXT	
  NoSpaces . . . . . . . . . . .	L Near	 0000007F _TEXT	
  SignOrSubtract . . . . . . . .	L Near	 000000A6 _TEXT	
  IsNegative . . . . . . . . . .	L Near	 000000C3 _TEXT	
  IsSymbol . . . . . . . . . . .	L Near	 000000DF _TEXT	
  SubtractNum  . . . . . . . . .	L Near	 00000172 _TEXT	
  AddNum . . . . . . . . . . . .	L Near	 00000197 _TEXT	
  DivideNum  . . . . . . . . . .	L Near	 000001BC _TEXT	
  MultiplyNum  . . . . . . . . .	L Near	 000001E4 _TEXT	
  ClearStack . . . . . . . . . .	L Near	 00000206 _TEXT	
  XChng  . . . . . . . . . . . .	L Near	 0000021A _TEXT	
  StackTooSmall  . . . . . . . .	L Near	 00000249 _TEXT	
  ConvertToInt . . . . . . . . .	L Near	 00000258 _TEXT	
  IntLoop  . . . . . . . . . . .	L Near	 0000028A _TEXT	
  IntContinue  . . . . . . . . .	L Near	 000002A0 _TEXT	
  NumTooBig  . . . . . . . . . .	L Near	 000002CA _TEXT	
  PowerTen . . . . . . . . . . .	L Near	 000002D9 _TEXT	
  PowerTenLoop . . . . . . . . .	L Near	 000002E9 _TEXT	
  PushStack  . . . . . . . . . .	L Near	 000002FC _TEXT	
  PopStack . . . . . . . . . . .	L Near	 0000031B _TEXT	
  StackOverflow  . . . . . . . .	L Near	 0000033A _TEXT	
  Digit  . . . . . . . . . . . .	L Near	 00000346 _TEXT	
  PrintTop . . . . . . . . . . .	L Near	 0000037B _TEXT	
  RollUp . . . . . . . . . . . .	L Near	 000003B5 _TEXT	
  RollUpLoop . . . . . . . . . .	L Near	 000003D7 _TEXT	
  RollUpDone . . . . . . . . . .	L Near	 000003E9 _TEXT	
  RollDown . . . . . . . . . . .	L Near	 00000400 _TEXT	
  RollDownLoop . . . . . . . . .	L Near	 00000431 _TEXT	
  RollDownDone . . . . . . . . .	L Near	 0000044C _TEXT	
  ViewAll  . . . . . . . . . . .	L Near	 00000466 _TEXT	
  ViewLoop . . . . . . . . . . .	L Near	 0000047C _TEXT	
  InputError . . . . . . . . . .	L Near	 0000049F _TEXT	
  Quit . . . . . . . . . . . . .	L Near	 000004AE _TEXT	
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFERSIZE . . . . . . . . . . .	Number	 00000010h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
InpIndex . . . . . . . . . . . .	DWord	 000000B4 _DATA	
Input  . . . . . . . . . . . . .	Byte	 000000BC _DATA	
InvalidMsg . . . . . . . . . . .	Byte	 00000048 _DATA	
InvalidSize  . . . . . . . . . .	Byte	 0000007B _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
MyStack  . . . . . . . . . . . .	DWord	 00000000 _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
Negative . . . . . . . . . . . .	Byte	 000000CC _DATA	
Newline  . . . . . . . . . . . .	Byte	 000000B0 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
OvFlowMsg  . . . . . . . . . . .	Byte	 00000036 _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Power  . . . . . . . . . . . . .	DWord	 000000D5 _DATA	
Prompt1  . . . . . . . . . . . .	Byte	 00000020 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STACKSIZE  . . . . . . . . . . .	Number	 00000008h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StackIndex . . . . . . . . . . .	DWord	 000000B8 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TempIndex  . . . . . . . . . . .	DWord	 000000D1 _DATA	
TempResult . . . . . . . . . . .	DWord	 000000CD _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
ValueTooLarge  . . . . . . . . .	Byte	 00000058 _DATA	
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
